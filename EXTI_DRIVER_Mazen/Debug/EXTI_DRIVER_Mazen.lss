
EXTI_DRIVER_Mazen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000027d8  0000286c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800168  00800168  00002974  2**0
                  ALLOC
  3 .stab         0000207c  00000000  00000000  00002974  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001139  00000000  00000000  000049f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00005ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00005e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00007e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00008ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000a19c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000a45d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__vector_1>
       8:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_2>
       c:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 ed       	ldi	r30, 0xD8	; 216
      78:	f7 e2       	ldi	r31, 0x27	; 39
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 76 06 	call	0xcec	; 0xcec <main>
      8a:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 13 	jmp	0x27be	; 0x27be <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <APP_FUNC_EXTI0>:
#include"../include/HAL/LCD/LCD_Interface.h"

#define F_CPU 8000000UL

void APP_FUNC_EXTI0 (void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	HLED_voidToogleLedStatus(PORTA,PIN0);
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	0e 94 c9 11 	call	0x2392	; 0x2392 <HLED_voidToogleLedStatus>

//	static u8 i=1;
//	HLCD_voidGoToPos(1,1);
//	HLCD_voidDisplayNumber(i);
//	i++;
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <main>:

int main(void)
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62

	MDIO_voidInit();
     cf4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <MDIO_voidInit>
	HLCD_voidInit();
     cf8:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <HLCD_voidInit>
	MEXTI_voidConfig(EXTI0,FALLING_EDGE);
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	62 e0       	ldi	r22, 0x02	; 2
     d00:	0e 94 86 0a 	call	0x150c	; 0x150c <MEXTI_voidConfig>
	MEXTI_voidSetCallback(EXTI0,APP_FUNC_EXTI0);
     d04:	2b e6       	ldi	r18, 0x6B	; 107
     d06:	36 e0       	ldi	r19, 0x06	; 6
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	b9 01       	movw	r22, r18
     d0c:	0e 94 a8 0b 	call	0x1750	; 0x1750 <MEXTI_voidSetCallback>
	MEXTI_voidEnable(EXTI0);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <MEXTI_voidEnable>
	MGI_voidEnable();
     d16:	0e 94 81 0c 	call	0x1902	; 0x1902 <MGI_voidEnable>
     d1a:	ff cf       	rjmp	.-2      	; 0xd1a <main+0x2e>

00000d1c <MDIO_voidInit>:
#include"../include/MCAL/DIO/DIO_Interface.h"
#include"../include/MCAL/DIO/DIO_Private.h"
#include"../include/MCAL/DIO/DIO_Cfg.h"

void MDIO_voidInit(void)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PORTA_PIN7_DIRECTION,PORTA_PIN6_DIRECTION,PORTA_PIN5_DIRECTION,PORTA_PIN4_DIRECTION,
     d24:	ea e3       	ldi	r30, 0x3A	; 58
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	80 83       	st	Z, r24
			            PORTA_PIN3_DIRECTION,PORTA_PIN2_DIRECTION,PORTA_PIN1_DIRECTION,PORTA_PIN0_DIRECTION);

	DDRB_REG = CONC_BIT(PORTB_PIN7_DIRECTION,PORTB_PIN6_DIRECTION,PORTB_PIN5_DIRECTION,PORTB_PIN4_DIRECTION,
     d2c:	e7 e3       	ldi	r30, 0x37	; 55
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	8b ef       	ldi	r24, 0xFB	; 251
     d32:	80 83       	st	Z, r24
			            PORTB_PIN3_DIRECTION,PORTB_PIN2_DIRECTION,PORTB_PIN1_DIRECTION,PORTB_PIN0_DIRECTION);

	DDRC_REG = CONC_BIT(PORTC_PIN7_DIRECTION,PORTC_PIN6_DIRECTION,PORTC_PIN5_DIRECTION,PORTC_PIN4_DIRECTION,
     d34:	e4 e3       	ldi	r30, 0x34	; 52
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	87 e0       	ldi	r24, 0x07	; 7
     d3a:	80 83       	st	Z, r24
			            PORTC_PIN3_DIRECTION,PORTC_PIN2_DIRECTION,PORTC_PIN1_DIRECTION,PORTC_PIN0_DIRECTION);

	DDRD_REG = CONC_BIT(PORTD_PIN7_DIRECTION,PORTD_PIN6_DIRECTION,PORTD_PIN5_DIRECTION,PORTD_PIN4_DIRECTION,
     d3c:	e1 e3       	ldi	r30, 0x31	; 49
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	10 82       	st	Z, r1
			            PORTD_PIN3_DIRECTION,PORTD_PIN2_DIRECTION,PORTD_PIN1_DIRECTION,PORTD_PIN0_DIRECTION);

	PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE,
     d42:	eb e3       	ldi	r30, 0x3B	; 59
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	10 82       	st	Z, r1
			             PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);

	PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE,
     d48:	e8 e3       	ldi	r30, 0x38	; 56
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	84 e0       	ldi	r24, 0x04	; 4
     d4e:	80 83       	st	Z, r24
                         PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);

	PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE,
     d50:	e5 e3       	ldi	r30, 0x35	; 53
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	10 82       	st	Z, r1
                         PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);

	PORTD_REG = CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE,
     d56:	e2 e3       	ldi	r30, 0x32	; 50
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	8c e0       	ldi	r24, 0x0C	; 12
     d5c:	80 83       	st	Z, r24
                         PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);

}
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo, PIN_DIRECTION A_PinDirection)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	2d 97       	sbiw	r28, 0x0d	; 13
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	89 83       	std	Y+1, r24	; 0x01
     d7a:	6a 83       	std	Y+2, r22	; 0x02
     d7c:	4b 83       	std	Y+3, r20	; 0x03
	//Input Validation
	if((A_DIOPort <= PORTD) && (A_DIOPinNo <= PIN7) && (A_PinDirection <= DIO_OUTPUT))
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	84 30       	cpi	r24, 0x04	; 4
     d82:	08 f0       	brcs	.+2      	; 0xd86 <MDIO_voidSetPinDirection+0x22>
     d84:	08 c1       	rjmp	.+528    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	88 30       	cpi	r24, 0x08	; 8
     d8a:	08 f0       	brcs	.+2      	; 0xd8e <MDIO_voidSetPinDirection+0x2a>
     d8c:	04 c1       	rjmp	.+520    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	08 f0       	brcs	.+2      	; 0xd96 <MDIO_voidSetPinDirection+0x32>
     d94:	00 c1       	rjmp	.+512    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
	{
		switch(A_DIOPort)
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3d 87       	std	Y+13, r19	; 0x0d
     d9e:	2c 87       	std	Y+12, r18	; 0x0c
     da0:	8c 85       	ldd	r24, Y+12	; 0x0c
     da2:	9d 85       	ldd	r25, Y+13	; 0x0d
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	09 f4       	brne	.+2      	; 0xdac <MDIO_voidSetPinDirection+0x48>
     daa:	4f c0       	rjmp	.+158    	; 0xe4a <MDIO_voidSetPinDirection+0xe6>
     dac:	2c 85       	ldd	r18, Y+12	; 0x0c
     dae:	3d 85       	ldd	r19, Y+13	; 0x0d
     db0:	22 30       	cpi	r18, 0x02	; 2
     db2:	31 05       	cpc	r19, r1
     db4:	2c f4       	brge	.+10     	; 0xdc0 <MDIO_voidSetPinDirection+0x5c>
     db6:	8c 85       	ldd	r24, Y+12	; 0x0c
     db8:	9d 85       	ldd	r25, Y+13	; 0x0d
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	71 f0       	breq	.+28     	; 0xdda <MDIO_voidSetPinDirection+0x76>
     dbe:	eb c0       	rjmp	.+470    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
     dc0:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc2:	3d 85       	ldd	r19, Y+13	; 0x0d
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <MDIO_voidSetPinDirection+0x68>
     dca:	77 c0       	rjmp	.+238    	; 0xeba <MDIO_voidSetPinDirection+0x156>
     dcc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dce:	9d 85       	ldd	r25, Y+13	; 0x0d
     dd0:	83 30       	cpi	r24, 0x03	; 3
     dd2:	91 05       	cpc	r25, r1
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <MDIO_voidSetPinDirection+0x74>
     dd6:	a9 c0       	rjmp	.+338    	; 0xf2a <MDIO_voidSetPinDirection+0x1c6>
     dd8:	de c0       	rjmp	.+444    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
		{
		case PORTA:
			switch(A_PinDirection)
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	3b 87       	std	Y+11, r19	; 0x0b
     de2:	2a 87       	std	Y+10, r18	; 0x0a
     de4:	8a 85       	ldd	r24, Y+10	; 0x0a
     de6:	9b 85       	ldd	r25, Y+11	; 0x0b
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	d1 f0       	breq	.+52     	; 0xe20 <MDIO_voidSetPinDirection+0xbc>
     dec:	2a 85       	ldd	r18, Y+10	; 0x0a
     dee:	3b 85       	ldd	r19, Y+11	; 0x0b
     df0:	21 30       	cpi	r18, 0x01	; 1
     df2:	31 05       	cpc	r19, r1
     df4:	09 f0       	breq	.+2      	; 0xdf8 <MDIO_voidSetPinDirection+0x94>
     df6:	cf c0       	rjmp	.+414    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
			{
			case DIO_OUTPUT: SET_BIT(DDRA_REG,A_DIOPinNo); break;
     df8:	aa e3       	ldi	r26, 0x3A	; 58
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ea e3       	ldi	r30, 0x3A	; 58
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <MDIO_voidSetPinDirection+0xb2>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <MDIO_voidSetPinDirection+0xae>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	bb c0       	rjmp	.+374    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
			case DIO_INPUT:  CLR_BIT(DDRA_REG,A_DIOPinNo); break;
     e20:	aa e3       	ldi	r26, 0x3A	; 58
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	ea e3       	ldi	r30, 0x3A	; 58
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <MDIO_voidSetPinDirection+0xda>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <MDIO_voidSetPinDirection+0xd6>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	a6 c0       	rjmp	.+332    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
			}
			break;
		case PORTB:
			switch(A_PinDirection)
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	39 87       	std	Y+9, r19	; 0x09
     e52:	28 87       	std	Y+8, r18	; 0x08
     e54:	88 85       	ldd	r24, Y+8	; 0x08
     e56:	99 85       	ldd	r25, Y+9	; 0x09
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	d1 f0       	breq	.+52     	; 0xe90 <MDIO_voidSetPinDirection+0x12c>
     e5c:	28 85       	ldd	r18, Y+8	; 0x08
     e5e:	39 85       	ldd	r19, Y+9	; 0x09
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	31 05       	cpc	r19, r1
     e64:	09 f0       	breq	.+2      	; 0xe68 <MDIO_voidSetPinDirection+0x104>
     e66:	97 c0       	rjmp	.+302    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
			{
			case DIO_OUTPUT: SET_BIT(DDRB_REG,A_DIOPinNo); break;
     e68:	a7 e3       	ldi	r26, 0x37	; 55
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e7 e3       	ldi	r30, 0x37	; 55
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <MDIO_voidSetPinDirection+0x122>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <MDIO_voidSetPinDirection+0x11e>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	83 c0       	rjmp	.+262    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
			case DIO_INPUT:  CLR_BIT(DDRB_REG,A_DIOPinNo); break;
     e90:	a7 e3       	ldi	r26, 0x37	; 55
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e7 e3       	ldi	r30, 0x37	; 55
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <MDIO_voidSetPinDirection+0x14a>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <MDIO_voidSetPinDirection+0x146>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	6e c0       	rjmp	.+220    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
			}
			break;
		case PORTC:
			switch (A_PinDirection)
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	3f 83       	std	Y+7, r19	; 0x07
     ec2:	2e 83       	std	Y+6, r18	; 0x06
     ec4:	8e 81       	ldd	r24, Y+6	; 0x06
     ec6:	9f 81       	ldd	r25, Y+7	; 0x07
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	d1 f0       	breq	.+52     	; 0xf00 <MDIO_voidSetPinDirection+0x19c>
     ecc:	2e 81       	ldd	r18, Y+6	; 0x06
     ece:	3f 81       	ldd	r19, Y+7	; 0x07
     ed0:	21 30       	cpi	r18, 0x01	; 1
     ed2:	31 05       	cpc	r19, r1
     ed4:	09 f0       	breq	.+2      	; 0xed8 <MDIO_voidSetPinDirection+0x174>
     ed6:	5f c0       	rjmp	.+190    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
			{
			case DIO_OUTPUT: SET_BIT(DDRC_REG, A_DIOPinNo); break;
     ed8:	a4 e3       	ldi	r26, 0x34	; 52
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e4 e3       	ldi	r30, 0x34	; 52
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <MDIO_voidSetPinDirection+0x192>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <MDIO_voidSetPinDirection+0x18e>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	4b c0       	rjmp	.+150    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
			case DIO_INPUT:  CLR_BIT(DDRC_REG, A_DIOPinNo); break;
     f00:	a4 e3       	ldi	r26, 0x34	; 52
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e4 e3       	ldi	r30, 0x34	; 52
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <MDIO_voidSetPinDirection+0x1ba>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <MDIO_voidSetPinDirection+0x1b6>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	36 c0       	rjmp	.+108    	; 0xf96 <MDIO_voidSetPinDirection+0x232>
			}
			break;
		case PORTD:
			switch (A_PinDirection)
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3d 83       	std	Y+5, r19	; 0x05
     f32:	2c 83       	std	Y+4, r18	; 0x04
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	9d 81       	ldd	r25, Y+5	; 0x05
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	c9 f0       	breq	.+50     	; 0xf6e <MDIO_voidSetPinDirection+0x20a>
     f3c:	2c 81       	ldd	r18, Y+4	; 0x04
     f3e:	3d 81       	ldd	r19, Y+5	; 0x05
     f40:	21 30       	cpi	r18, 0x01	; 1
     f42:	31 05       	cpc	r19, r1
     f44:	41 f5       	brne	.+80     	; 0xf96 <MDIO_voidSetPinDirection+0x232>
			{
			case DIO_OUTPUT: SET_BIT(DDRD_REG, A_DIOPinNo);	break;
     f46:	a1 e3       	ldi	r26, 0x31	; 49
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e1 e3       	ldi	r30, 0x31	; 49
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <MDIO_voidSetPinDirection+0x200>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <MDIO_voidSetPinDirection+0x1fc>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	14 c0       	rjmp	.+40     	; 0xf96 <MDIO_voidSetPinDirection+0x232>
			case DIO_INPUT:	 CLR_BIT(DDRD_REG, A_DIOPinNo);	break;
     f6e:	a1 e3       	ldi	r26, 0x31	; 49
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e1 e3       	ldi	r30, 0x31	; 49
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <MDIO_voidSetPinDirection+0x228>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <MDIO_voidSetPinDirection+0x224>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f96:	2d 96       	adiw	r28, 0x0d	; 13
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo, DIO_VALUE A_PinValue)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	2d 97       	sbiw	r28, 0x0d	; 13
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	6a 83       	std	Y+2, r22	; 0x02
     fc0:	4b 83       	std	Y+3, r20	; 0x03
	//Input Validation
	if((A_DIOPort <= PORTD) && (A_DIOPinNo <= PIN7) && (A_PinValue <= DIO_SET))
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	84 30       	cpi	r24, 0x04	; 4
     fc6:	08 f0       	brcs	.+2      	; 0xfca <MDIO_voidSetPinValue+0x22>
     fc8:	08 c1       	rjmp	.+528    	; 0x11da <MDIO_voidSetPinValue+0x232>
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	88 30       	cpi	r24, 0x08	; 8
     fce:	08 f0       	brcs	.+2      	; 0xfd2 <MDIO_voidSetPinValue+0x2a>
     fd0:	04 c1       	rjmp	.+520    	; 0x11da <MDIO_voidSetPinValue+0x232>
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	82 30       	cpi	r24, 0x02	; 2
     fd6:	08 f0       	brcs	.+2      	; 0xfda <MDIO_voidSetPinValue+0x32>
     fd8:	00 c1       	rjmp	.+512    	; 0x11da <MDIO_voidSetPinValue+0x232>
	{
		switch(A_DIOPort)
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	3d 87       	std	Y+13, r19	; 0x0d
     fe2:	2c 87       	std	Y+12, r18	; 0x0c
     fe4:	8c 85       	ldd	r24, Y+12	; 0x0c
     fe6:	9d 85       	ldd	r25, Y+13	; 0x0d
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	91 05       	cpc	r25, r1
     fec:	09 f4       	brne	.+2      	; 0xff0 <MDIO_voidSetPinValue+0x48>
     fee:	4f c0       	rjmp	.+158    	; 0x108e <MDIO_voidSetPinValue+0xe6>
     ff0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ff2:	3d 85       	ldd	r19, Y+13	; 0x0d
     ff4:	22 30       	cpi	r18, 0x02	; 2
     ff6:	31 05       	cpc	r19, r1
     ff8:	2c f4       	brge	.+10     	; 0x1004 <MDIO_voidSetPinValue+0x5c>
     ffa:	8c 85       	ldd	r24, Y+12	; 0x0c
     ffc:	9d 85       	ldd	r25, Y+13	; 0x0d
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	71 f0       	breq	.+28     	; 0x101e <MDIO_voidSetPinValue+0x76>
    1002:	eb c0       	rjmp	.+470    	; 0x11da <MDIO_voidSetPinValue+0x232>
    1004:	2c 85       	ldd	r18, Y+12	; 0x0c
    1006:	3d 85       	ldd	r19, Y+13	; 0x0d
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	09 f4       	brne	.+2      	; 0x1010 <MDIO_voidSetPinValue+0x68>
    100e:	77 c0       	rjmp	.+238    	; 0x10fe <MDIO_voidSetPinValue+0x156>
    1010:	8c 85       	ldd	r24, Y+12	; 0x0c
    1012:	9d 85       	ldd	r25, Y+13	; 0x0d
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <MDIO_voidSetPinValue+0x74>
    101a:	a9 c0       	rjmp	.+338    	; 0x116e <MDIO_voidSetPinValue+0x1c6>
    101c:	de c0       	rjmp	.+444    	; 0x11da <MDIO_voidSetPinValue+0x232>
		{
		case PORTA:
			switch(A_PinValue)
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3b 87       	std	Y+11, r19	; 0x0b
    1026:	2a 87       	std	Y+10, r18	; 0x0a
    1028:	8a 85       	ldd	r24, Y+10	; 0x0a
    102a:	9b 85       	ldd	r25, Y+11	; 0x0b
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	d1 f0       	breq	.+52     	; 0x1064 <MDIO_voidSetPinValue+0xbc>
    1030:	2a 85       	ldd	r18, Y+10	; 0x0a
    1032:	3b 85       	ldd	r19, Y+11	; 0x0b
    1034:	21 30       	cpi	r18, 0x01	; 1
    1036:	31 05       	cpc	r19, r1
    1038:	09 f0       	breq	.+2      	; 0x103c <MDIO_voidSetPinValue+0x94>
    103a:	cf c0       	rjmp	.+414    	; 0x11da <MDIO_voidSetPinValue+0x232>
			{
			case DIO_SET:   SET_BIT(PORTA_REG,A_DIOPinNo); break;
    103c:	ab e3       	ldi	r26, 0x3B	; 59
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	eb e3       	ldi	r30, 0x3B	; 59
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <MDIO_voidSetPinValue+0xb2>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <MDIO_voidSetPinValue+0xae>
    105e:	84 2b       	or	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	bb c0       	rjmp	.+374    	; 0x11da <MDIO_voidSetPinValue+0x232>
			case DIO_RESET: CLR_BIT(PORTA_REG,A_DIOPinNo); break;
    1064:	ab e3       	ldi	r26, 0x3B	; 59
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	eb e3       	ldi	r30, 0x3B	; 59
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <MDIO_voidSetPinValue+0xda>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <MDIO_voidSetPinValue+0xd6>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	a6 c0       	rjmp	.+332    	; 0x11da <MDIO_voidSetPinValue+0x232>
			}
			break;
		case PORTB:
			switch(A_PinValue)
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	39 87       	std	Y+9, r19	; 0x09
    1096:	28 87       	std	Y+8, r18	; 0x08
    1098:	88 85       	ldd	r24, Y+8	; 0x08
    109a:	99 85       	ldd	r25, Y+9	; 0x09
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	d1 f0       	breq	.+52     	; 0x10d4 <MDIO_voidSetPinValue+0x12c>
    10a0:	28 85       	ldd	r18, Y+8	; 0x08
    10a2:	39 85       	ldd	r19, Y+9	; 0x09
    10a4:	21 30       	cpi	r18, 0x01	; 1
    10a6:	31 05       	cpc	r19, r1
    10a8:	09 f0       	breq	.+2      	; 0x10ac <MDIO_voidSetPinValue+0x104>
    10aa:	97 c0       	rjmp	.+302    	; 0x11da <MDIO_voidSetPinValue+0x232>
			{
			case DIO_SET:   SET_BIT(PORTB_REG,A_DIOPinNo); break;
    10ac:	a8 e3       	ldi	r26, 0x38	; 56
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e8 e3       	ldi	r30, 0x38	; 56
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <MDIO_voidSetPinValue+0x122>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <MDIO_voidSetPinValue+0x11e>
    10ce:	84 2b       	or	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	83 c0       	rjmp	.+262    	; 0x11da <MDIO_voidSetPinValue+0x232>
			case DIO_RESET: CLR_BIT(PORTB_REG,A_DIOPinNo); break;
    10d4:	a8 e3       	ldi	r26, 0x38	; 56
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e8 e3       	ldi	r30, 0x38	; 56
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <MDIO_voidSetPinValue+0x14a>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <MDIO_voidSetPinValue+0x146>
    10f6:	80 95       	com	r24
    10f8:	84 23       	and	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	6e c0       	rjmp	.+220    	; 0x11da <MDIO_voidSetPinValue+0x232>
			}
			break;
		case PORTC:
			switch (A_PinValue)
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3f 83       	std	Y+7, r19	; 0x07
    1106:	2e 83       	std	Y+6, r18	; 0x06
    1108:	8e 81       	ldd	r24, Y+6	; 0x06
    110a:	9f 81       	ldd	r25, Y+7	; 0x07
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	d1 f0       	breq	.+52     	; 0x1144 <MDIO_voidSetPinValue+0x19c>
    1110:	2e 81       	ldd	r18, Y+6	; 0x06
    1112:	3f 81       	ldd	r19, Y+7	; 0x07
    1114:	21 30       	cpi	r18, 0x01	; 1
    1116:	31 05       	cpc	r19, r1
    1118:	09 f0       	breq	.+2      	; 0x111c <MDIO_voidSetPinValue+0x174>
    111a:	5f c0       	rjmp	.+190    	; 0x11da <MDIO_voidSetPinValue+0x232>
			{
			case DIO_SET:   SET_BIT(PORTC_REG, A_DIOPinNo); break;
    111c:	a5 e3       	ldi	r26, 0x35	; 53
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <MDIO_voidSetPinValue+0x192>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <MDIO_voidSetPinValue+0x18e>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	4b c0       	rjmp	.+150    	; 0x11da <MDIO_voidSetPinValue+0x232>
			case DIO_RESET: CLR_BIT(PORTC_REG, A_DIOPinNo); break;
    1144:	a5 e3       	ldi	r26, 0x35	; 53
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e3       	ldi	r30, 0x35	; 53
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <MDIO_voidSetPinValue+0x1ba>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <MDIO_voidSetPinValue+0x1b6>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	36 c0       	rjmp	.+108    	; 0x11da <MDIO_voidSetPinValue+0x232>
			}
			break;
		case PORTD:
			switch (A_PinValue)
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	3d 83       	std	Y+5, r19	; 0x05
    1176:	2c 83       	std	Y+4, r18	; 0x04
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	c9 f0       	breq	.+50     	; 0x11b2 <MDIO_voidSetPinValue+0x20a>
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	21 30       	cpi	r18, 0x01	; 1
    1186:	31 05       	cpc	r19, r1
    1188:	41 f5       	brne	.+80     	; 0x11da <MDIO_voidSetPinValue+0x232>
			{
			case DIO_SET:   SET_BIT(PORTD_REG, A_DIOPinNo);	break;
    118a:	a2 e3       	ldi	r26, 0x32	; 50
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e2 e3       	ldi	r30, 0x32	; 50
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <MDIO_voidSetPinValue+0x200>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <MDIO_voidSetPinValue+0x1fc>
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	14 c0       	rjmp	.+40     	; 0x11da <MDIO_voidSetPinValue+0x232>
			case DIO_RESET: CLR_BIT(PORTD_REG, A_DIOPinNo);	break;
    11b2:	a2 e3       	ldi	r26, 0x32	; 50
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e2 e3       	ldi	r30, 0x32	; 50
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <MDIO_voidSetPinValue+0x228>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <MDIO_voidSetPinValue+0x224>
    11d4:	80 95       	com	r24
    11d6:	84 23       	and	r24, r20
    11d8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11da:	2d 96       	adiw	r28, 0x0d	; 13
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <MDIO_voidTogglePinValue+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <MDIO_voidTogglePinValue+0x8>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if((A_DIOPort <= PORTD) && (A_DIOPinNo <= PIN7))
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	84 30       	cpi	r24, 0x04	; 4
    1200:	08 f0       	brcs	.+2      	; 0x1204 <MDIO_voidTogglePinValue+0x18>
    1202:	72 c0       	rjmp	.+228    	; 0x12e8 <MDIO_voidTogglePinValue+0xfc>
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	88 30       	cpi	r24, 0x08	; 8
    1208:	08 f0       	brcs	.+2      	; 0x120c <MDIO_voidTogglePinValue+0x20>
    120a:	6e c0       	rjmp	.+220    	; 0x12e8 <MDIO_voidTogglePinValue+0xfc>
	{
		switch(A_DIOPort)
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	3c 83       	std	Y+4, r19	; 0x04
    1214:	2b 83       	std	Y+3, r18	; 0x03
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	91 05       	cpc	r25, r1
    121e:	49 f1       	breq	.+82     	; 0x1272 <MDIO_voidTogglePinValue+0x86>
    1220:	2b 81       	ldd	r18, Y+3	; 0x03
    1222:	3c 81       	ldd	r19, Y+4	; 0x04
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	2c f4       	brge	.+10     	; 0x1234 <MDIO_voidTogglePinValue+0x48>
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	61 f0       	breq	.+24     	; 0x124a <MDIO_voidTogglePinValue+0x5e>
    1232:	5a c0       	rjmp	.+180    	; 0x12e8 <MDIO_voidTogglePinValue+0xfc>
    1234:	2b 81       	ldd	r18, Y+3	; 0x03
    1236:	3c 81       	ldd	r19, Y+4	; 0x04
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	71 f1       	breq	.+92     	; 0x129a <MDIO_voidTogglePinValue+0xae>
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	91 05       	cpc	r25, r1
    1246:	e9 f1       	breq	.+122    	; 0x12c2 <MDIO_voidTogglePinValue+0xd6>
    1248:	4f c0       	rjmp	.+158    	; 0x12e8 <MDIO_voidTogglePinValue+0xfc>
		{
		case PORTA:
			TOGGLE_BIT(PORTA_REG,A_DIOPinNo);
    124a:	ab e3       	ldi	r26, 0x3B	; 59
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	eb e3       	ldi	r30, 0x3B	; 59
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <MDIO_voidTogglePinValue+0x7c>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <MDIO_voidTogglePinValue+0x78>
    126c:	84 27       	eor	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	3b c0       	rjmp	.+118    	; 0x12e8 <MDIO_voidTogglePinValue+0xfc>
			break;
		case PORTB:
			TOGGLE_BIT(PORTB_REG,A_DIOPinNo);
    1272:	a8 e3       	ldi	r26, 0x38	; 56
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e8 e3       	ldi	r30, 0x38	; 56
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <MDIO_voidTogglePinValue+0xa4>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <MDIO_voidTogglePinValue+0xa0>
    1294:	84 27       	eor	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	27 c0       	rjmp	.+78     	; 0x12e8 <MDIO_voidTogglePinValue+0xfc>
			break;
		case PORTC:
			TOGGLE_BIT(PORTC_REG,A_DIOPinNo);
    129a:	a5 e3       	ldi	r26, 0x35	; 53
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e5 e3       	ldi	r30, 0x35	; 53
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <MDIO_voidTogglePinValue+0xcc>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <MDIO_voidTogglePinValue+0xc8>
    12bc:	84 27       	eor	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	13 c0       	rjmp	.+38     	; 0x12e8 <MDIO_voidTogglePinValue+0xfc>
			break;
		case PORTD:
			TOGGLE_BIT(PORTD_REG,A_DIOPinNo);
    12c2:	a2 e3       	ldi	r26, 0x32	; 50
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e2 e3       	ldi	r30, 0x32	; 50
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <MDIO_voidTogglePinValue+0xf4>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <MDIO_voidTogglePinValue+0xf0>
    12e4:	84 27       	eor	r24, r20
    12e6:	8c 93       	st	X, r24
			break;
		}
	}
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <MDIO_DIO_VALUEGetPinValue>:

DIO_VALUE MDIO_DIO_VALUEGetPinValue(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <MDIO_DIO_VALUEGetPinValue+0x6>
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <MDIO_DIO_VALUEGetPinValue+0x8>
    12fe:	0f 92       	push	r0
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE PinRead = 255;
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	89 83       	std	Y+1, r24	; 0x01
	//Input Validation
	if((A_DIOPort <= PORTD) && (A_DIOPinNo <= PIN7))
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	84 30       	cpi	r24, 0x04	; 4
    1310:	08 f0       	brcs	.+2      	; 0x1314 <MDIO_DIO_VALUEGetPinValue+0x1e>
    1312:	6b c0       	rjmp	.+214    	; 0x13ea <MDIO_DIO_VALUEGetPinValue+0xf4>
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	88 30       	cpi	r24, 0x08	; 8
    1318:	08 f0       	brcs	.+2      	; 0x131c <MDIO_DIO_VALUEGetPinValue+0x26>
    131a:	67 c0       	rjmp	.+206    	; 0x13ea <MDIO_DIO_VALUEGetPinValue+0xf4>
	{
		switch(A_DIOPort)
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3d 83       	std	Y+5, r19	; 0x05
    1324:	2c 83       	std	Y+4, r18	; 0x04
    1326:	4c 81       	ldd	r20, Y+4	; 0x04
    1328:	5d 81       	ldd	r21, Y+5	; 0x05
    132a:	41 30       	cpi	r20, 0x01	; 1
    132c:	51 05       	cpc	r21, r1
    132e:	41 f1       	breq	.+80     	; 0x1380 <MDIO_DIO_VALUEGetPinValue+0x8a>
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	91 05       	cpc	r25, r1
    1338:	34 f4       	brge	.+12     	; 0x1346 <MDIO_DIO_VALUEGetPinValue+0x50>
    133a:	2c 81       	ldd	r18, Y+4	; 0x04
    133c:	3d 81       	ldd	r19, Y+5	; 0x05
    133e:	21 15       	cp	r18, r1
    1340:	31 05       	cpc	r19, r1
    1342:	61 f0       	breq	.+24     	; 0x135c <MDIO_DIO_VALUEGetPinValue+0x66>
    1344:	52 c0       	rjmp	.+164    	; 0x13ea <MDIO_DIO_VALUEGetPinValue+0xf4>
    1346:	4c 81       	ldd	r20, Y+4	; 0x04
    1348:	5d 81       	ldd	r21, Y+5	; 0x05
    134a:	42 30       	cpi	r20, 0x02	; 2
    134c:	51 05       	cpc	r21, r1
    134e:	51 f1       	breq	.+84     	; 0x13a4 <MDIO_DIO_VALUEGetPinValue+0xae>
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	91 05       	cpc	r25, r1
    1358:	b9 f1       	breq	.+110    	; 0x13c8 <MDIO_DIO_VALUEGetPinValue+0xd2>
    135a:	47 c0       	rjmp	.+142    	; 0x13ea <MDIO_DIO_VALUEGetPinValue+0xf4>
		{
		case PORTA:
			PinRead = GET_BIT(PORTA_REG,A_DIOPinNo);
    135c:	eb e3       	ldi	r30, 0x3B	; 59
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a9 01       	movw	r20, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <MDIO_DIO_VALUEGetPinValue+0x7e>
    1370:	55 95       	asr	r21
    1372:	47 95       	ror	r20
    1374:	8a 95       	dec	r24
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <MDIO_DIO_VALUEGetPinValue+0x7a>
    1378:	ca 01       	movw	r24, r20
    137a:	81 70       	andi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	35 c0       	rjmp	.+106    	; 0x13ea <MDIO_DIO_VALUEGetPinValue+0xf4>
			break;
		case PORTB:
			PinRead = GET_BIT(PORTB_REG,A_DIOPinNo);
    1380:	e8 e3       	ldi	r30, 0x38	; 56
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	a9 01       	movw	r20, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <MDIO_DIO_VALUEGetPinValue+0xa2>
    1394:	55 95       	asr	r21
    1396:	47 95       	ror	r20
    1398:	8a 95       	dec	r24
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <MDIO_DIO_VALUEGetPinValue+0x9e>
    139c:	ca 01       	movw	r24, r20
    139e:	81 70       	andi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	23 c0       	rjmp	.+70     	; 0x13ea <MDIO_DIO_VALUEGetPinValue+0xf4>
			break;
		case PORTC:
			PinRead = GET_BIT(PORTA_REG,A_DIOPinNo);
    13a4:	eb e3       	ldi	r30, 0x3B	; 59
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <MDIO_DIO_VALUEGetPinValue+0xc6>
    13b8:	55 95       	asr	r21
    13ba:	47 95       	ror	r20
    13bc:	8a 95       	dec	r24
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <MDIO_DIO_VALUEGetPinValue+0xc2>
    13c0:	ca 01       	movw	r24, r20
    13c2:	81 70       	andi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	11 c0       	rjmp	.+34     	; 0x13ea <MDIO_DIO_VALUEGetPinValue+0xf4>
			break;
		case PORTD:
			PinRead = GET_BIT(PORTD_REG,A_DIOPinNo);
    13c8:	e2 e3       	ldi	r30, 0x32	; 50
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a9 01       	movw	r20, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <MDIO_DIO_VALUEGetPinValue+0xea>
    13dc:	55 95       	asr	r21
    13de:	47 95       	ror	r20
    13e0:	8a 95       	dec	r24
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <MDIO_DIO_VALUEGetPinValue+0xe6>
    13e4:	ca 01       	movw	r24, r20
    13e6:	81 70       	andi	r24, 0x01	; 1
    13e8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return PinRead;
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(DIO_PORTS A_DIOPort, u8 A_PortDirection)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	00 d0       	rcall	.+0      	; 0x1402 <MDIO_voidSetPortDirection+0x6>
    1402:	00 d0       	rcall	.+0      	; 0x1404 <MDIO_voidSetPortDirection+0x8>
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	6a 83       	std	Y+2, r22	; 0x02
	if(A_DIOPort <= PORTD)
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	84 30       	cpi	r24, 0x04	; 4
    1410:	90 f5       	brcc	.+100    	; 0x1476 <MDIO_voidSetPortDirection+0x7a>
		{
			switch(A_DIOPort)
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3c 83       	std	Y+4, r19	; 0x04
    141a:	2b 83       	std	Y+3, r18	; 0x03
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	91 05       	cpc	r25, r1
    1424:	d1 f0       	breq	.+52     	; 0x145a <MDIO_voidSetPortDirection+0x5e>
    1426:	2b 81       	ldd	r18, Y+3	; 0x03
    1428:	3c 81       	ldd	r19, Y+4	; 0x04
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	2c f4       	brge	.+10     	; 0x143a <MDIO_voidSetPortDirection+0x3e>
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	61 f0       	breq	.+24     	; 0x1450 <MDIO_voidSetPortDirection+0x54>
    1438:	1e c0       	rjmp	.+60     	; 0x1476 <MDIO_voidSetPortDirection+0x7a>
    143a:	2b 81       	ldd	r18, Y+3	; 0x03
    143c:	3c 81       	ldd	r19, Y+4	; 0x04
    143e:	22 30       	cpi	r18, 0x02	; 2
    1440:	31 05       	cpc	r19, r1
    1442:	81 f0       	breq	.+32     	; 0x1464 <MDIO_voidSetPortDirection+0x68>
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	91 05       	cpc	r25, r1
    144c:	81 f0       	breq	.+32     	; 0x146e <MDIO_voidSetPortDirection+0x72>
    144e:	13 c0       	rjmp	.+38     	; 0x1476 <MDIO_voidSetPortDirection+0x7a>
			{
			case PORTA:
				DDRA_REG = A_PortDirection;
    1450:	ea e3       	ldi	r30, 0x3A	; 58
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	80 83       	st	Z, r24
    1458:	0e c0       	rjmp	.+28     	; 0x1476 <MDIO_voidSetPortDirection+0x7a>
				break;
			case PORTB:
				DDRB_REG = A_PortDirection;
    145a:	e7 e3       	ldi	r30, 0x37	; 55
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	80 83       	st	Z, r24
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <MDIO_voidSetPortDirection+0x7a>
				break;
			case PORTC:
				DDRC_REG = A_PortDirection;
    1464:	e4 e3       	ldi	r30, 0x34	; 52
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	80 83       	st	Z, r24
    146c:	04 c0       	rjmp	.+8      	; 0x1476 <MDIO_voidSetPortDirection+0x7a>
				break;
			case PORTD:
				DDRD_REG = A_PortDirection;
    146e:	e1 e3       	ldi	r30, 0x31	; 49
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 83       	st	Z, r24
				break;
			}
		}
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(DIO_PORTS A_DIOPort, u8 A_PortValue)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	00 d0       	rcall	.+0      	; 0x148a <MDIO_voidSetPortValue+0x6>
    148a:	00 d0       	rcall	.+0      	; 0x148c <MDIO_voidSetPortValue+0x8>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	6a 83       	std	Y+2, r22	; 0x02
	if(A_DIOPort <= PORTD)
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	84 30       	cpi	r24, 0x04	; 4
    1498:	90 f5       	brcc	.+100    	; 0x14fe <MDIO_voidSetPortValue+0x7a>
		{
			switch(A_DIOPort)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3c 83       	std	Y+4, r19	; 0x04
    14a2:	2b 83       	std	Y+3, r18	; 0x03
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	91 05       	cpc	r25, r1
    14ac:	d1 f0       	breq	.+52     	; 0x14e2 <MDIO_voidSetPortValue+0x5e>
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	3c 81       	ldd	r19, Y+4	; 0x04
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <MDIO_voidSetPortValue+0x3e>
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	61 f0       	breq	.+24     	; 0x14d8 <MDIO_voidSetPortValue+0x54>
    14c0:	1e c0       	rjmp	.+60     	; 0x14fe <MDIO_voidSetPortValue+0x7a>
    14c2:	2b 81       	ldd	r18, Y+3	; 0x03
    14c4:	3c 81       	ldd	r19, Y+4	; 0x04
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	81 f0       	breq	.+32     	; 0x14ec <MDIO_voidSetPortValue+0x68>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	83 30       	cpi	r24, 0x03	; 3
    14d2:	91 05       	cpc	r25, r1
    14d4:	81 f0       	breq	.+32     	; 0x14f6 <MDIO_voidSetPortValue+0x72>
    14d6:	13 c0       	rjmp	.+38     	; 0x14fe <MDIO_voidSetPortValue+0x7a>
			{
			case PORTA:
				PORTA_REG = A_PortValue;
    14d8:	eb e3       	ldi	r30, 0x3B	; 59
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	80 83       	st	Z, r24
    14e0:	0e c0       	rjmp	.+28     	; 0x14fe <MDIO_voidSetPortValue+0x7a>
				break;
			case PORTB:
				PORTB_REG = A_PortValue;
    14e2:	e8 e3       	ldi	r30, 0x38	; 56
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	80 83       	st	Z, r24
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <MDIO_voidSetPortValue+0x7a>
				break;
			case PORTC:
				PORTC_REG = A_PortValue;
    14ec:	e5 e3       	ldi	r30, 0x35	; 53
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	80 83       	st	Z, r24
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <MDIO_voidSetPortValue+0x7a>
				break;
			case PORTD:
				PORTD_REG = A_PortValue;
    14f6:	e2 e3       	ldi	r30, 0x32	; 50
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 83       	st	Z, r24
				break;
			}
		}
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <MEXTI_voidConfig>:
void (*EXTI0_Callback) (void) = NULL;
void (*EXTI1_Callback) (void) = NULL;
void (*EXTI2_Callback) (void) = NULL;

void MEXTI_voidConfig (EXTI_ID A_EXTI_ID, EXTI_SENSE_MODE A_EXTISenseMode)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <MEXTI_voidConfig+0x6>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <MEXTI_voidConfig+0x8>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <MEXTI_voidConfig+0xa>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if ( (A_EXTI_ID <= EXTI2) && (A_EXTISenseMode <= RISING_EDGE) )
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	83 30       	cpi	r24, 0x03	; 3
    1522:	08 f0       	brcs	.+2      	; 0x1526 <MEXTI_voidConfig+0x1a>
    1524:	5e c0       	rjmp	.+188    	; 0x15e2 <MEXTI_voidConfig+0xd6>
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	84 30       	cpi	r24, 0x04	; 4
    152a:	08 f0       	brcs	.+2      	; 0x152e <MEXTI_voidConfig+0x22>
    152c:	5a c0       	rjmp	.+180    	; 0x15e2 <MEXTI_voidConfig+0xd6>
	{
		switch (A_EXTI_ID)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3e 83       	std	Y+6, r19	; 0x06
    1536:	2d 83       	std	Y+5, r18	; 0x05
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	91 05       	cpc	r25, r1
    1540:	d1 f0       	breq	.+52     	; 0x1576 <MEXTI_voidConfig+0x6a>
    1542:	2d 81       	ldd	r18, Y+5	; 0x05
    1544:	3e 81       	ldd	r19, Y+6	; 0x06
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	61 f1       	breq	.+88     	; 0x15a4 <MEXTI_voidConfig+0x98>
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	09 f0       	breq	.+2      	; 0x1556 <MEXTI_voidConfig+0x4a>
    1554:	46 c0       	rjmp	.+140    	; 0x15e2 <MEXTI_voidConfig+0xd6>
		{
		case EXTI0:
					MCUCR &= ~(SENSE_MODE_MASK << EXTI0_SENSE_MODE_BITS);
    1556:	a5 e5       	ldi	r26, 0x55	; 85
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e5       	ldi	r30, 0x55	; 85
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8c 7f       	andi	r24, 0xFC	; 252
    1562:	8c 93       	st	X, r24
					MCUCR |= (A_EXTISenseMode << EXTI0_SENSE_MODE_BITS);
    1564:	a5 e5       	ldi	r26, 0x55	; 85
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e5 e5       	ldi	r30, 0x55	; 85
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	90 81       	ld	r25, Z
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	89 2b       	or	r24, r25
    1572:	8c 93       	st	X, r24
    1574:	36 c0       	rjmp	.+108    	; 0x15e2 <MEXTI_voidConfig+0xd6>
					break;
		case EXTI1:
					MCUCR &= ~(SENSE_MODE_MASK << EXTI1_SENSE_MODE_BITS);
    1576:	a5 e5       	ldi	r26, 0x55	; 85
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e5 e5       	ldi	r30, 0x55	; 85
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	83 7f       	andi	r24, 0xF3	; 243
    1582:	8c 93       	st	X, r24
					MCUCR |= (A_EXTISenseMode << EXTI1_SENSE_MODE_BITS);
    1584:	a5 e5       	ldi	r26, 0x55	; 85
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e5 e5       	ldi	r30, 0x55	; 85
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	28 2f       	mov	r18, r24
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	88 2f       	mov	r24, r24
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	82 2b       	or	r24, r18
    15a0:	8c 93       	st	X, r24
    15a2:	1f c0       	rjmp	.+62     	; 0x15e2 <MEXTI_voidConfig+0xd6>
					break;
		case EXTI2:
					switch (A_EXTISenseMode)
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3c 83       	std	Y+4, r19	; 0x04
    15ac:	2b 83       	std	Y+3, r18	; 0x03
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	91 05       	cpc	r25, r1
    15b6:	31 f0       	breq	.+12     	; 0x15c4 <MEXTI_voidConfig+0xb8>
    15b8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ba:	3c 81       	ldd	r19, Y+4	; 0x04
    15bc:	23 30       	cpi	r18, 0x03	; 3
    15be:	31 05       	cpc	r19, r1
    15c0:	49 f0       	breq	.+18     	; 0x15d4 <MEXTI_voidConfig+0xc8>
    15c2:	0f c0       	rjmp	.+30     	; 0x15e2 <MEXTI_voidConfig+0xd6>
					{
					case FALLING_EDGE:
									  CLR_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS);
    15c4:	a4 e5       	ldi	r26, 0x54	; 84
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e4 e5       	ldi	r30, 0x54	; 84
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 7b       	andi	r24, 0xBF	; 191
    15d0:	8c 93       	st	X, r24
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <MEXTI_voidConfig+0xd6>
									  break;
					case RISING_EDGE:
									  SET_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS);
    15d4:	a4 e5       	ldi	r26, 0x54	; 84
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e4 e5       	ldi	r30, 0x54	; 84
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	80 64       	ori	r24, 0x40	; 64
    15e0:	8c 93       	st	X, r24

		default: break;

		}
	}
}
    15e2:	26 96       	adiw	r28, 0x06	; 6
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <MEXTI_voidEnable>:
void MEXTI_voidEnable (EXTI_ID A_EXTI_ID)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <MEXTI_voidEnable+0x6>
    15fa:	0f 92       	push	r0
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	89 83       	std	Y+1, r24	; 0x01
	//Input Validation
	if ( (A_EXTI_ID <= EXTI2))
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	83 30       	cpi	r24, 0x03	; 3
    1606:	50 f5       	brcc	.+84     	; 0x165c <MEXTI_voidEnable+0x68>
	{
		switch (A_EXTI_ID)
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3b 83       	std	Y+3, r19	; 0x03
    1610:	2a 83       	std	Y+2, r18	; 0x02
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	9b 81       	ldd	r25, Y+3	; 0x03
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	89 f0       	breq	.+34     	; 0x163e <MEXTI_voidEnable+0x4a>
    161c:	2a 81       	ldd	r18, Y+2	; 0x02
    161e:	3b 81       	ldd	r19, Y+3	; 0x03
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	a1 f0       	breq	.+40     	; 0x164e <MEXTI_voidEnable+0x5a>
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	9b 81       	ldd	r25, Y+3	; 0x03
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	b9 f4       	brne	.+46     	; 0x165c <MEXTI_voidEnable+0x68>
		{
		case EXTI0: SET_BIT(GICR,EXTI0_ENABLE_MODE_BITS); break;
    162e:	ab e5       	ldi	r26, 0x5B	; 91
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	eb e5       	ldi	r30, 0x5B	; 91
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	80 64       	ori	r24, 0x40	; 64
    163a:	8c 93       	st	X, r24
    163c:	0f c0       	rjmp	.+30     	; 0x165c <MEXTI_voidEnable+0x68>
		case EXTI1: SET_BIT(GICR,EXTI1_ENABLE_MODE_BITS); break;
    163e:	ab e5       	ldi	r26, 0x5B	; 91
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	eb e5       	ldi	r30, 0x5B	; 91
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 68       	ori	r24, 0x80	; 128
    164a:	8c 93       	st	X, r24
    164c:	07 c0       	rjmp	.+14     	; 0x165c <MEXTI_voidEnable+0x68>
		case EXTI2: SET_BIT(GICR,EXTI2_ENABLE_MODE_BITS); break;
    164e:	ab e5       	ldi	r26, 0x5B	; 91
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	eb e5       	ldi	r30, 0x5B	; 91
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 62       	ori	r24, 0x20	; 32
    165a:	8c 93       	st	X, r24
		default: break;
		}
	}
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <MEXTI_voidDisable>:
void MEXTI_voidDisable (EXTI_ID A_EXTI_ID)
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	00 d0       	rcall	.+0      	; 0x166e <MEXTI_voidDisable+0x6>
    166e:	0f 92       	push	r0
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	89 83       	std	Y+1, r24	; 0x01
	//Input Validation
	if ( (A_EXTI_ID <= EXTI2))
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	83 30       	cpi	r24, 0x03	; 3
    167a:	50 f5       	brcc	.+84     	; 0x16d0 <MEXTI_voidDisable+0x68>
	{
		switch (A_EXTI_ID)
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3b 83       	std	Y+3, r19	; 0x03
    1684:	2a 83       	std	Y+2, r18	; 0x02
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	9b 81       	ldd	r25, Y+3	; 0x03
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	91 05       	cpc	r25, r1
    168e:	89 f0       	breq	.+34     	; 0x16b2 <MEXTI_voidDisable+0x4a>
    1690:	2a 81       	ldd	r18, Y+2	; 0x02
    1692:	3b 81       	ldd	r19, Y+3	; 0x03
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	a1 f0       	breq	.+40     	; 0x16c2 <MEXTI_voidDisable+0x5a>
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	9b 81       	ldd	r25, Y+3	; 0x03
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	b9 f4       	brne	.+46     	; 0x16d0 <MEXTI_voidDisable+0x68>
		{
		case EXTI0: CLR_BIT(GICR,EXTI0_ENABLE_MODE_BITS); break;
    16a2:	ab e5       	ldi	r26, 0x5B	; 91
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	eb e5       	ldi	r30, 0x5B	; 91
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8f 7b       	andi	r24, 0xBF	; 191
    16ae:	8c 93       	st	X, r24
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <MEXTI_voidDisable+0x68>
		case EXTI1: CLR_BIT(GICR,EXTI1_ENABLE_MODE_BITS); break;
    16b2:	ab e5       	ldi	r26, 0x5B	; 91
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	eb e5       	ldi	r30, 0x5B	; 91
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8f 77       	andi	r24, 0x7F	; 127
    16be:	8c 93       	st	X, r24
    16c0:	07 c0       	rjmp	.+14     	; 0x16d0 <MEXTI_voidDisable+0x68>
		case EXTI2: CLR_BIT(GICR,EXTI2_ENABLE_MODE_BITS); break;
    16c2:	ab e5       	ldi	r26, 0x5B	; 91
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	eb e5       	ldi	r30, 0x5B	; 91
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	8f 7d       	andi	r24, 0xDF	; 223
    16ce:	8c 93       	st	X, r24
		default: break;
		}
	}
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <MEXTI_voidClearFlag>:
void MEXTI_voidClearFlag (EXTI_ID A_EXTI_ID)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <MEXTI_voidClearFlag+0x6>
    16e2:	0f 92       	push	r0
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	89 83       	std	Y+1, r24	; 0x01
	//Input Validation
	if ( (A_EXTI_ID <= EXTI2))
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	83 30       	cpi	r24, 0x03	; 3
    16ee:	50 f5       	brcc	.+84     	; 0x1744 <MEXTI_voidClearFlag+0x68>
	{
		switch (A_EXTI_ID)
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	3b 83       	std	Y+3, r19	; 0x03
    16f8:	2a 83       	std	Y+2, r18	; 0x02
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	9b 81       	ldd	r25, Y+3	; 0x03
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	91 05       	cpc	r25, r1
    1702:	89 f0       	breq	.+34     	; 0x1726 <MEXTI_voidClearFlag+0x4a>
    1704:	2a 81       	ldd	r18, Y+2	; 0x02
    1706:	3b 81       	ldd	r19, Y+3	; 0x03
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	a1 f0       	breq	.+40     	; 0x1736 <MEXTI_voidClearFlag+0x5a>
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	b9 f4       	brne	.+46     	; 0x1744 <MEXTI_voidClearFlag+0x68>
		{
		case EXTI0: SET_BIT(GIFR,EXTI0_ENABLE_MODE_BITS); break;
    1716:	aa e5       	ldi	r26, 0x5A	; 90
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ea e5       	ldi	r30, 0x5A	; 90
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	80 64       	ori	r24, 0x40	; 64
    1722:	8c 93       	st	X, r24
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <MEXTI_voidClearFlag+0x68>
		case EXTI1: SET_BIT(GIFR,EXTI1_ENABLE_MODE_BITS); break;
    1726:	aa e5       	ldi	r26, 0x5A	; 90
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ea e5       	ldi	r30, 0x5A	; 90
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 68       	ori	r24, 0x80	; 128
    1732:	8c 93       	st	X, r24
    1734:	07 c0       	rjmp	.+14     	; 0x1744 <MEXTI_voidClearFlag+0x68>
		case EXTI2: SET_BIT(GIFR,EXTI2_ENABLE_MODE_BITS); break;
    1736:	aa e5       	ldi	r26, 0x5A	; 90
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ea e5       	ldi	r30, 0x5A	; 90
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	80 62       	ori	r24, 0x20	; 32
    1742:	8c 93       	st	X, r24
		default: break;
		}
	}
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <MEXTI_voidSetCallback>:

void MEXTI_voidSetCallback(EXTI_ID A_EXTI_ID, void(*A_ptrToFunc)(void))
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <MEXTI_voidSetCallback+0x6>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <MEXTI_voidSetCallback+0x8>
    1758:	0f 92       	push	r0
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	7b 83       	std	Y+3, r23	; 0x03
    1762:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if ( (A_EXTI_ID <= EXTI2) && (A_ptrToFunc != NULL))
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	58 f5       	brcc	.+86     	; 0x17c0 <MEXTI_voidSetCallback+0x70>
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	9b 81       	ldd	r25, Y+3	; 0x03
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	39 f1       	breq	.+78     	; 0x17c0 <MEXTI_voidSetCallback+0x70>
	{
		switch (A_EXTI_ID)
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3d 83       	std	Y+5, r19	; 0x05
    177a:	2c 83       	std	Y+4, r18	; 0x04
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	9d 81       	ldd	r25, Y+5	; 0x05
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	91 05       	cpc	r25, r1
    1784:	81 f0       	breq	.+32     	; 0x17a6 <MEXTI_voidSetCallback+0x56>
    1786:	2c 81       	ldd	r18, Y+4	; 0x04
    1788:	3d 81       	ldd	r19, Y+5	; 0x05
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	91 f0       	breq	.+36     	; 0x17b4 <MEXTI_voidSetCallback+0x64>
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	a1 f4       	brne	.+40     	; 0x17c0 <MEXTI_voidSetCallback+0x70>
		{
		case EXTI0: EXTI0_Callback = A_ptrToFunc; break;
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	9b 81       	ldd	r25, Y+3	; 0x03
    179c:	90 93 69 01 	sts	0x0169, r25
    17a0:	80 93 68 01 	sts	0x0168, r24
    17a4:	0d c0       	rjmp	.+26     	; 0x17c0 <MEXTI_voidSetCallback+0x70>
		case EXTI1: EXTI1_Callback = A_ptrToFunc; break;
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	9b 81       	ldd	r25, Y+3	; 0x03
    17aa:	90 93 6b 01 	sts	0x016B, r25
    17ae:	80 93 6a 01 	sts	0x016A, r24
    17b2:	06 c0       	rjmp	.+12     	; 0x17c0 <MEXTI_voidSetCallback+0x70>
		case EXTI2: EXTI2_Callback = A_ptrToFunc; break;
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	9b 81       	ldd	r25, Y+3	; 0x03
    17b8:	90 93 6d 01 	sts	0x016D, r25
    17bc:	80 93 6c 01 	sts	0x016C, r24
		default: break;
		}
	}
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <__vector_1>:

void __vector_1(void) __attribute((signal));
void __vector_1(void)
{
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
    17da:	2f 93       	push	r18
    17dc:	3f 93       	push	r19
    17de:	4f 93       	push	r20
    17e0:	5f 93       	push	r21
    17e2:	6f 93       	push	r22
    17e4:	7f 93       	push	r23
    17e6:	8f 93       	push	r24
    17e8:	9f 93       	push	r25
    17ea:	af 93       	push	r26
    17ec:	bf 93       	push	r27
    17ee:	ef 93       	push	r30
    17f0:	ff 93       	push	r31
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
	if (EXTI0_Callback != NULL)
    17fa:	80 91 68 01 	lds	r24, 0x0168
    17fe:	90 91 69 01 	lds	r25, 0x0169
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	29 f0       	breq	.+10     	; 0x1810 <__vector_1+0x40>
	{
		EXTI0_Callback();
    1806:	e0 91 68 01 	lds	r30, 0x0168
    180a:	f0 91 69 01 	lds	r31, 0x0169
    180e:	09 95       	icall
	}

}
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	ff 91       	pop	r31
    1816:	ef 91       	pop	r30
    1818:	bf 91       	pop	r27
    181a:	af 91       	pop	r26
    181c:	9f 91       	pop	r25
    181e:	8f 91       	pop	r24
    1820:	7f 91       	pop	r23
    1822:	6f 91       	pop	r22
    1824:	5f 91       	pop	r21
    1826:	4f 91       	pop	r20
    1828:	3f 91       	pop	r19
    182a:	2f 91       	pop	r18
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	0f 90       	pop	r0
    1832:	1f 90       	pop	r1
    1834:	18 95       	reti

00001836 <__vector_2>:

void __vector_2(void) __attribute((signal));
void __vector_2(void)
{
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	2f 93       	push	r18
    1842:	3f 93       	push	r19
    1844:	4f 93       	push	r20
    1846:	5f 93       	push	r21
    1848:	6f 93       	push	r22
    184a:	7f 93       	push	r23
    184c:	8f 93       	push	r24
    184e:	9f 93       	push	r25
    1850:	af 93       	push	r26
    1852:	bf 93       	push	r27
    1854:	ef 93       	push	r30
    1856:	ff 93       	push	r31
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
	if (EXTI1_Callback != NULL)
    1860:	80 91 6a 01 	lds	r24, 0x016A
    1864:	90 91 6b 01 	lds	r25, 0x016B
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	29 f0       	breq	.+10     	; 0x1876 <__vector_2+0x40>
	{
		EXTI1_Callback();
    186c:	e0 91 6a 01 	lds	r30, 0x016A
    1870:	f0 91 6b 01 	lds	r31, 0x016B
    1874:	09 95       	icall
	}
}
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	ff 91       	pop	r31
    187c:	ef 91       	pop	r30
    187e:	bf 91       	pop	r27
    1880:	af 91       	pop	r26
    1882:	9f 91       	pop	r25
    1884:	8f 91       	pop	r24
    1886:	7f 91       	pop	r23
    1888:	6f 91       	pop	r22
    188a:	5f 91       	pop	r21
    188c:	4f 91       	pop	r20
    188e:	3f 91       	pop	r19
    1890:	2f 91       	pop	r18
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	0f 90       	pop	r0
    1898:	1f 90       	pop	r1
    189a:	18 95       	reti

0000189c <__vector_3>:

void __vector_3(void) __attribute((signal));
void __vector_3(void)
{
    189c:	1f 92       	push	r1
    189e:	0f 92       	push	r0
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	0f 92       	push	r0
    18a4:	11 24       	eor	r1, r1
    18a6:	2f 93       	push	r18
    18a8:	3f 93       	push	r19
    18aa:	4f 93       	push	r20
    18ac:	5f 93       	push	r21
    18ae:	6f 93       	push	r22
    18b0:	7f 93       	push	r23
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	if (EXTI2_Callback != NULL)
    18c6:	80 91 6c 01 	lds	r24, 0x016C
    18ca:	90 91 6d 01 	lds	r25, 0x016D
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	29 f0       	breq	.+10     	; 0x18dc <__vector_3+0x40>
	{
		EXTI2_Callback();
    18d2:	e0 91 6c 01 	lds	r30, 0x016C
    18d6:	f0 91 6d 01 	lds	r31, 0x016D
    18da:	09 95       	icall
	}
}
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	ff 91       	pop	r31
    18e2:	ef 91       	pop	r30
    18e4:	bf 91       	pop	r27
    18e6:	af 91       	pop	r26
    18e8:	9f 91       	pop	r25
    18ea:	8f 91       	pop	r24
    18ec:	7f 91       	pop	r23
    18ee:	6f 91       	pop	r22
    18f0:	5f 91       	pop	r21
    18f2:	4f 91       	pop	r20
    18f4:	3f 91       	pop	r19
    18f6:	2f 91       	pop	r18
    18f8:	0f 90       	pop	r0
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	0f 90       	pop	r0
    18fe:	1f 90       	pop	r1
    1900:	18 95       	reti

00001902 <MGI_voidEnable>:
#include"../include/MCAL/GI/GI_Interface.h"
#include"../include/MCAL/GI/GI_Private.h"
#include"../include/MCAL/GI/GI_Cfg.h"

void MGI_voidEnable (void)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    190a:	af e5       	ldi	r26, 0x5F	; 95
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	ef e5       	ldi	r30, 0x5F	; 95
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	80 68       	ori	r24, 0x80	; 128
    1916:	8c 93       	st	X, r24
}
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <MGI_voidDisable>:

void MGI_voidDisable (void)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    1926:	af e5       	ldi	r26, 0x5F	; 95
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	ef e5       	ldi	r30, 0x5F	; 95
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	8f 77       	andi	r24, 0x7F	; 127
    1932:	8c 93       	st	X, r24
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <HLCD_voidSendCommand>:
#include"../include/HAL/LCD/LCD_Cfg.h"

#define F_CPU 8000000UL

void HLCD_voidSendCommand(u8 A_u8Command)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	2f 97       	sbiw	r28, 0x0f	; 15
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	8f 87       	std	Y+15, r24	; 0x0f
	//RS = 0 , RW = 0
	MDIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_RESET);
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_RESET);
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MDIO_voidSetPinValue>

	//Set Data Port with the Command value
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Command);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	6f 85       	ldd	r22, Y+15	; 0x0f
    1968:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>

	//Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_SET);
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	62 e0       	ldi	r22, 0x02	; 2
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MDIO_voidSetPinValue>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	a0 e0       	ldi	r26, 0x00	; 0
    197c:	b0 e4       	ldi	r27, 0x40	; 64
    197e:	8b 87       	std	Y+11, r24	; 0x0b
    1980:	9c 87       	std	Y+12, r25	; 0x0c
    1982:	ad 87       	std	Y+13, r26	; 0x0d
    1984:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1986:	6b 85       	ldd	r22, Y+11	; 0x0b
    1988:	7c 85       	ldd	r23, Y+12	; 0x0c
    198a:	8d 85       	ldd	r24, Y+13	; 0x0d
    198c:	9e 85       	ldd	r25, Y+14	; 0x0e
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	4a ef       	ldi	r20, 0xFA	; 250
    1994:	54 e4       	ldi	r21, 0x44	; 68
    1996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	8f 83       	std	Y+7, r24	; 0x07
    19a0:	98 87       	std	Y+8, r25	; 0x08
    19a2:	a9 87       	std	Y+9, r26	; 0x09
    19a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a6:	6f 81       	ldd	r22, Y+7	; 0x07
    19a8:	78 85       	ldd	r23, Y+8	; 0x08
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e8       	ldi	r20, 0x80	; 128
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ba:	88 23       	and	r24, r24
    19bc:	2c f4       	brge	.+10     	; 0x19c8 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	3f c0       	rjmp	.+126    	; 0x1a46 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    19c8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ca:	78 85       	ldd	r23, Y+8	; 0x08
    19cc:	89 85       	ldd	r24, Y+9	; 0x09
    19ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	3f ef       	ldi	r19, 0xFF	; 255
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	57 e4       	ldi	r21, 0x47	; 71
    19d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19dc:	18 16       	cp	r1, r24
    19de:	4c f5       	brge	.+82     	; 0x1a32 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e2       	ldi	r20, 0x20	; 32
    19ee:	51 e4       	ldi	r21, 0x41	; 65
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <HLCD_voidSendCommand+0xee>
    1a0a:	88 ec       	ldi	r24, 0xC8	; 200
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9c 83       	std	Y+4, r25	; 0x04
    1a10:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <HLCD_voidSendCommand+0xdc>
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	69 f7       	brne	.-38     	; 0x1a0a <HLCD_voidSendCommand+0xd0>
    1a30:	14 c0       	rjmp	.+40     	; 0x1a5a <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a32:	6f 81       	ldd	r22, Y+7	; 0x07
    1a34:	78 85       	ldd	r23, Y+8	; 0x08
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <HLCD_voidSendCommand+0x118>
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_RESET);
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
    1a5c:	62 e0       	ldi	r22, 0x02	; 2
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MDIO_voidSetPinValue>
}
    1a64:	2f 96       	adiw	r28, 0x0f	; 15
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	2f 97       	sbiw	r28, 0x0f	; 15
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	8f 87       	std	Y+15, r24	; 0x0f
	//RS = 1 , RW = 0
	MDIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_SET);
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_RESET);
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MDIO_voidSetPinValue>

	//Set Data Port with the Command value
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Data);
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1aa4:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>

	//Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_SET);
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	62 e0       	ldi	r22, 0x02	; 2
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MDIO_voidSetPinValue>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a0 e0       	ldi	r26, 0x00	; 0
    1ab8:	b0 e4       	ldi	r27, 0x40	; 64
    1aba:	8b 87       	std	Y+11, r24	; 0x0b
    1abc:	9c 87       	std	Y+12, r25	; 0x0c
    1abe:	ad 87       	std	Y+13, r26	; 0x0d
    1ac0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	4a ef       	ldi	r20, 0xFA	; 250
    1ad0:	54 e4       	ldi	r21, 0x44	; 68
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	8f 83       	std	Y+7, r24	; 0x07
    1adc:	98 87       	std	Y+8, r25	; 0x08
    1ade:	a9 87       	std	Y+9, r26	; 0x09
    1ae0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae4:	78 85       	ldd	r23, Y+8	; 0x08
    1ae6:	89 85       	ldd	r24, Y+9	; 0x09
    1ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	3f c0       	rjmp	.+126    	; 0x1b82 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1b04:	6f 81       	ldd	r22, Y+7	; 0x07
    1b06:	78 85       	ldd	r23, Y+8	; 0x08
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	3f ef       	ldi	r19, 0xFF	; 255
    1b10:	4f e7       	ldi	r20, 0x7F	; 127
    1b12:	57 e4       	ldi	r21, 0x47	; 71
    1b14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b18:	18 16       	cp	r1, r24
    1b1a:	4c f5       	brge	.+82     	; 0x1b6e <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e2       	ldi	r20, 0x20	; 32
    1b2a:	51 e4       	ldi	r21, 0x41	; 65
    1b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9e 83       	std	Y+6, r25	; 0x06
    1b42:	8d 83       	std	Y+5, r24	; 0x05
    1b44:	0f c0       	rjmp	.+30     	; 0x1b64 <HLCD_voidSendData+0xee>
    1b46:	88 ec       	ldi	r24, 0xC8	; 200
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9c 83       	std	Y+4, r25	; 0x04
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <HLCD_voidSendData+0xdc>
    1b56:	9c 83       	std	Y+4, r25	; 0x04
    1b58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	69 f7       	brne	.-38     	; 0x1b46 <HLCD_voidSendData+0xd0>
    1b6c:	14 c0       	rjmp	.+40     	; 0x1b96 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b70:	78 85       	ldd	r23, Y+8	; 0x08
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9e 83       	std	Y+6, r25	; 0x06
    1b80:	8d 83       	std	Y+5, r24	; 0x05
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <HLCD_voidSendData+0x118>
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, DIO_RESET);
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	62 e0       	ldi	r22, 0x02	; 2
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MDIO_voidSetPinValue>
}
    1ba0:	2f 96       	adiw	r28, 0x0f	; 15
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <HLCD_voidInit>:

void HLCD_voidInit(void)
{
    1bb2:	0f 93       	push	r16
    1bb4:	1f 93       	push	r17
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	c6 54       	subi	r28, 0x46	; 70
    1bc0:	d0 40       	sbci	r29, 0x00	; 0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	fe 01       	movw	r30, r28
    1bce:	ed 5b       	subi	r30, 0xBD	; 189
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a0 ef       	ldi	r26, 0xF0	; 240
    1bd8:	b1 e4       	ldi	r27, 0x41	; 65
    1bda:	80 83       	st	Z, r24
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	8e 01       	movw	r16, r28
    1be4:	01 5c       	subi	r16, 0xC1	; 193
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	fe 01       	movw	r30, r28
    1bea:	ed 5b       	subi	r30, 0xBD	; 189
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	f8 01       	movw	r30, r16
    1c08:	80 83       	st	Z, r24
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	a2 83       	std	Z+2, r26	; 0x02
    1c0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c10:	fe 01       	movw	r30, r28
    1c12:	ff 96       	adiw	r30, 0x3f	; 63
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e8       	ldi	r20, 0x80	; 128
    1c22:	5f e3       	ldi	r21, 0x3F	; 63
    1c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c28:	88 23       	and	r24, r24
    1c2a:	2c f4       	brge	.+10     	; 0x1c36 <HLCD_voidInit+0x84>
		__ticks = 1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9e af       	std	Y+62, r25	; 0x3e
    1c32:	8d af       	std	Y+61, r24	; 0x3d
    1c34:	46 c0       	rjmp	.+140    	; 0x1cc2 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    1c36:	fe 01       	movw	r30, r28
    1c38:	ff 96       	adiw	r30, 0x3f	; 63
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	4f e7       	ldi	r20, 0x7F	; 127
    1c48:	57 e4       	ldi	r21, 0x47	; 71
    1c4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	64 f5       	brge	.+88     	; 0x1caa <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c52:	fe 01       	movw	r30, r28
    1c54:	ed 5b       	subi	r30, 0xBD	; 189
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e af       	std	Y+62, r25	; 0x3e
    1c7e:	8d af       	std	Y+61, r24	; 0x3d
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <HLCD_voidInit+0xee>
    1c82:	88 ec       	ldi	r24, 0xC8	; 200
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c af       	std	Y+60, r25	; 0x3c
    1c88:	8b af       	std	Y+59, r24	; 0x3b
    1c8a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c8c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <HLCD_voidInit+0xdc>
    1c92:	9c af       	std	Y+60, r25	; 0x3c
    1c94:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c98:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9e af       	std	Y+62, r25	; 0x3e
    1c9e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ca2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <HLCD_voidInit+0xd0>
    1ca8:	16 c0       	rjmp	.+44     	; 0x1cd6 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	fe 01       	movw	r30, r28
    1cac:	ff 96       	adiw	r30, 0x3f	; 63
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9e af       	std	Y+62, r25	; 0x3e
    1cc0:	8d af       	std	Y+61, r24	; 0x3d
    1cc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cc4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cc6:	9a af       	std	Y+58, r25	; 0x3a
    1cc8:	89 af       	std	Y+57, r24	; 0x39
    1cca:	89 ad       	ldd	r24, Y+57	; 0x39
    1ccc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <HLCD_voidInit+0x11c>
    1cd2:	9a af       	std	Y+58, r25	; 0x3a
    1cd4:	89 af       	std	Y+57, r24	; 0x39
	// Wait for more than 30ms
	_delay_ms(30);

	// Function Set
	HLCD_voidSendCommand(FUNCTION_SET);
    1cd6:	8c e3       	ldi	r24, 0x3C	; 60
    1cd8:	0e 94 9d 0c 	call	0x193a	; 0x193a <HLCD_voidSendCommand>
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a0 e8       	ldi	r26, 0x80	; 128
    1ce2:	bf e3       	ldi	r27, 0x3F	; 63
    1ce4:	8d ab       	std	Y+53, r24	; 0x35
    1ce6:	9e ab       	std	Y+54, r25	; 0x36
    1ce8:	af ab       	std	Y+55, r26	; 0x37
    1cea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cec:	6d a9       	ldd	r22, Y+53	; 0x35
    1cee:	7e a9       	ldd	r23, Y+54	; 0x36
    1cf0:	8f a9       	ldd	r24, Y+55	; 0x37
    1cf2:	98 ad       	ldd	r25, Y+56	; 0x38
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4a ef       	ldi	r20, 0xFA	; 250
    1cfa:	54 e4       	ldi	r21, 0x44	; 68
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	89 ab       	std	Y+49, r24	; 0x31
    1d06:	9a ab       	std	Y+50, r25	; 0x32
    1d08:	ab ab       	std	Y+51, r26	; 0x33
    1d0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d10:	8b a9       	ldd	r24, Y+51	; 0x33
    1d12:	9c a9       	ldd	r25, Y+52	; 0x34
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e8       	ldi	r20, 0x80	; 128
    1d1a:	5f e3       	ldi	r21, 0x3F	; 63
    1d1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d20:	88 23       	and	r24, r24
    1d22:	2c f4       	brge	.+10     	; 0x1d2e <HLCD_voidInit+0x17c>
		__ticks = 1;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	98 ab       	std	Y+48, r25	; 0x30
    1d2a:	8f a7       	std	Y+47, r24	; 0x2f
    1d2c:	3f c0       	rjmp	.+126    	; 0x1dac <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    1d2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d30:	7a a9       	ldd	r23, Y+50	; 0x32
    1d32:	8b a9       	ldd	r24, Y+51	; 0x33
    1d34:	9c a9       	ldd	r25, Y+52	; 0x34
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	3f ef       	ldi	r19, 0xFF	; 255
    1d3a:	4f e7       	ldi	r20, 0x7F	; 127
    1d3c:	57 e4       	ldi	r21, 0x47	; 71
    1d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d42:	18 16       	cp	r1, r24
    1d44:	4c f5       	brge	.+82     	; 0x1d98 <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d46:	6d a9       	ldd	r22, Y+53	; 0x35
    1d48:	7e a9       	ldd	r23, Y+54	; 0x36
    1d4a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d4c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e2       	ldi	r20, 0x20	; 32
    1d54:	51 e4       	ldi	r21, 0x41	; 65
    1d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	bc 01       	movw	r22, r24
    1d60:	cd 01       	movw	r24, r26
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	98 ab       	std	Y+48, r25	; 0x30
    1d6c:	8f a7       	std	Y+47, r24	; 0x2f
    1d6e:	0f c0       	rjmp	.+30     	; 0x1d8e <HLCD_voidInit+0x1dc>
    1d70:	88 ec       	ldi	r24, 0xC8	; 200
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	9e a7       	std	Y+46, r25	; 0x2e
    1d76:	8d a7       	std	Y+45, r24	; 0x2d
    1d78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <HLCD_voidInit+0x1ca>
    1d80:	9e a7       	std	Y+46, r25	; 0x2e
    1d82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d86:	98 a9       	ldd	r25, Y+48	; 0x30
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	98 ab       	std	Y+48, r25	; 0x30
    1d8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d90:	98 a9       	ldd	r25, Y+48	; 0x30
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	69 f7       	brne	.-38     	; 0x1d70 <HLCD_voidInit+0x1be>
    1d96:	14 c0       	rjmp	.+40     	; 0x1dc0 <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d98:	69 a9       	ldd	r22, Y+49	; 0x31
    1d9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	98 ab       	std	Y+48, r25	; 0x30
    1daa:	8f a7       	std	Y+47, r24	; 0x2f
    1dac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dae:	98 a9       	ldd	r25, Y+48	; 0x30
    1db0:	9c a7       	std	Y+44, r25	; 0x2c
    1db2:	8b a7       	std	Y+43, r24	; 0x2b
    1db4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <HLCD_voidInit+0x206>
    1dbc:	9c a7       	std	Y+44, r25	; 0x2c
    1dbe:	8b a7       	std	Y+43, r24	; 0x2b

	// Wait for more than 39us
	_delay_ms(1);

	// Display ON/OFF Control
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    1dc0:	8f e0       	ldi	r24, 0x0F	; 15
    1dc2:	0e 94 9d 0c 	call	0x193a	; 0x193a <HLCD_voidSendCommand>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 e8       	ldi	r26, 0x80	; 128
    1dcc:	bf e3       	ldi	r27, 0x3F	; 63
    1dce:	8f a3       	std	Y+39, r24	; 0x27
    1dd0:	98 a7       	std	Y+40, r25	; 0x28
    1dd2:	a9 a7       	std	Y+41, r26	; 0x29
    1dd4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd8:	78 a5       	ldd	r23, Y+40	; 0x28
    1dda:	89 a5       	ldd	r24, Y+41	; 0x29
    1ddc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a ef       	ldi	r20, 0xFA	; 250
    1de4:	54 e4       	ldi	r21, 0x44	; 68
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	8b a3       	std	Y+35, r24	; 0x23
    1df0:	9c a3       	std	Y+36, r25	; 0x24
    1df2:	ad a3       	std	Y+37, r26	; 0x25
    1df4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1df6:	6b a1       	ldd	r22, Y+35	; 0x23
    1df8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <HLCD_voidInit+0x266>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9a a3       	std	Y+34, r25	; 0x22
    1e14:	89 a3       	std	Y+33, r24	; 0x21
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1e18:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	6f a1       	ldd	r22, Y+39	; 0x27
    1e32:	78 a5       	ldd	r23, Y+40	; 0x28
    1e34:	89 a5       	ldd	r24, Y+41	; 0x29
    1e36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9a a3       	std	Y+34, r25	; 0x22
    1e56:	89 a3       	std	Y+33, r24	; 0x21
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <HLCD_voidInit+0x2c6>
    1e5a:	88 ec       	ldi	r24, 0xC8	; 200
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	98 a3       	std	Y+32, r25	; 0x20
    1e60:	8f 8f       	std	Y+31, r24	; 0x1f
    1e62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e64:	98 a1       	ldd	r25, Y+32	; 0x20
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <HLCD_voidInit+0x2b4>
    1e6a:	98 a3       	std	Y+32, r25	; 0x20
    1e6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e70:	9a a1       	ldd	r25, Y+34	; 0x22
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	9a a3       	std	Y+34, r25	; 0x22
    1e76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <HLCD_voidInit+0x2a8>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	6b a1       	ldd	r22, Y+35	; 0x23
    1e84:	7c a1       	ldd	r23, Y+36	; 0x24
    1e86:	8d a1       	ldd	r24, Y+37	; 0x25
    1e88:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9a a3       	std	Y+34, r25	; 0x22
    1e94:	89 a3       	std	Y+33, r24	; 0x21
    1e96:	89 a1       	ldd	r24, Y+33	; 0x21
    1e98:	9a a1       	ldd	r25, Y+34	; 0x22
    1e9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ea0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <HLCD_voidInit+0x2f0>
    1ea6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea8:	8d 8f       	std	Y+29, r24	; 0x1d

	// Wait for more than 39us
	_delay_ms(1);

	//Display Clear
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	0e 94 9d 0c 	call	0x193a	; 0x193a <HLCD_voidSendCommand>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e4       	ldi	r27, 0x40	; 64
    1eb8:	89 8f       	std	Y+25, r24	; 0x19
    1eba:	9a 8f       	std	Y+26, r25	; 0x1a
    1ebc:	ab 8f       	std	Y+27, r26	; 0x1b
    1ebe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4a ef       	ldi	r20, 0xFA	; 250
    1ece:	54 e4       	ldi	r21, 0x44	; 68
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8d 8b       	std	Y+21, r24	; 0x15
    1eda:	9e 8b       	std	Y+22, r25	; 0x16
    1edc:	af 8b       	std	Y+23, r26	; 0x17
    1ede:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ee0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	2c f4       	brge	.+10     	; 0x1f02 <HLCD_voidInit+0x350>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 8b       	std	Y+20, r25	; 0x14
    1efe:	8b 8b       	std	Y+19, r24	; 0x13
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1f02:	6d 89       	ldd	r22, Y+21	; 0x15
    1f04:	7e 89       	ldd	r23, Y+22	; 0x16
    1f06:	8f 89       	ldd	r24, Y+23	; 0x17
    1f08:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	4c f5       	brge	.+82     	; 0x1f6c <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9c 8b       	std	Y+20, r25	; 0x14
    1f40:	8b 8b       	std	Y+19, r24	; 0x13
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <HLCD_voidInit+0x3b0>
    1f44:	88 ec       	ldi	r24, 0xC8	; 200
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9a 8b       	std	Y+18, r25	; 0x12
    1f4a:	89 8b       	std	Y+17, r24	; 0x11
    1f4c:	89 89       	ldd	r24, Y+17	; 0x11
    1f4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <HLCD_voidInit+0x39e>
    1f54:	9a 8b       	std	Y+18, r25	; 0x12
    1f56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f58:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	9c 8b       	std	Y+20, r25	; 0x14
    1f60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	8b 89       	ldd	r24, Y+19	; 0x13
    1f64:	9c 89       	ldd	r25, Y+20	; 0x14
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <HLCD_voidInit+0x392>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f70:	8f 89       	ldd	r24, Y+23	; 0x17
    1f72:	98 8d       	ldd	r25, Y+24	; 0x18
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9c 8b       	std	Y+20, r25	; 0x14
    1f7e:	8b 8b       	std	Y+19, r24	; 0x13
    1f80:	8b 89       	ldd	r24, Y+19	; 0x13
    1f82:	9c 89       	ldd	r25, Y+20	; 0x14
    1f84:	98 8b       	std	Y+16, r25	; 0x10
    1f86:	8f 87       	std	Y+15, r24	; 0x0f
    1f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8a:	98 89       	ldd	r25, Y+16	; 0x10
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <HLCD_voidInit+0x3da>
    1f90:	98 8b       	std	Y+16, r25	; 0x10
    1f92:	8f 87       	std	Y+15, r24	; 0x0f

	// Wait for more than 1.53ms
	_delay_ms(2);

	// Entry Mode Set
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1f94:	86 e0       	ldi	r24, 0x06	; 6
    1f96:	0e 94 9d 0c 	call	0x193a	; 0x193a <HLCD_voidSendCommand>
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	a0 e8       	ldi	r26, 0x80	; 128
    1fa0:	bf e3       	ldi	r27, 0x3F	; 63
    1fa2:	8b 87       	std	Y+11, r24	; 0x0b
    1fa4:	9c 87       	std	Y+12, r25	; 0x0c
    1fa6:	ad 87       	std	Y+13, r26	; 0x0d
    1fa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1faa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4a ef       	ldi	r20, 0xFA	; 250
    1fb8:	54 e4       	ldi	r21, 0x44	; 68
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	8f 83       	std	Y+7, r24	; 0x07
    1fc4:	98 87       	std	Y+8, r25	; 0x08
    1fc6:	a9 87       	std	Y+9, r26	; 0x09
    1fc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e8       	ldi	r20, 0x80	; 128
    1fd8:	5f e3       	ldi	r21, 0x3F	; 63
    1fda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fde:	88 23       	and	r24, r24
    1fe0:	2c f4       	brge	.+10     	; 0x1fec <HLCD_voidInit+0x43a>
		__ticks = 1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	3f c0       	rjmp	.+126    	; 0x206a <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    1fec:	6f 81       	ldd	r22, Y+7	; 0x07
    1fee:	78 85       	ldd	r23, Y+8	; 0x08
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	3f ef       	ldi	r19, 0xFF	; 255
    1ff8:	4f e7       	ldi	r20, 0x7F	; 127
    1ffa:	57 e4       	ldi	r21, 0x47	; 71
    1ffc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2000:	18 16       	cp	r1, r24
    2002:	4c f5       	brge	.+82     	; 0x2056 <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2004:	6b 85       	ldd	r22, Y+11	; 0x0b
    2006:	7c 85       	ldd	r23, Y+12	; 0x0c
    2008:	8d 85       	ldd	r24, Y+13	; 0x0d
    200a:	9e 85       	ldd	r25, Y+14	; 0x0e
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e2       	ldi	r20, 0x20	; 32
    2012:	51 e4       	ldi	r21, 0x41	; 65
    2014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	0f c0       	rjmp	.+30     	; 0x204c <HLCD_voidInit+0x49a>
    202e:	88 ec       	ldi	r24, 0xC8	; 200
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	9c 83       	std	Y+4, r25	; 0x04
    2034:	8b 83       	std	Y+3, r24	; 0x03
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <HLCD_voidInit+0x488>
    203e:	9c 83       	std	Y+4, r25	; 0x04
    2040:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	9e 81       	ldd	r25, Y+6	; 0x06
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	69 f7       	brne	.-38     	; 0x202e <HLCD_voidInit+0x47c>
    2054:	14 c0       	rjmp	.+40     	; 0x207e <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2056:	6f 81       	ldd	r22, Y+7	; 0x07
    2058:	78 85       	ldd	r23, Y+8	; 0x08
    205a:	89 85       	ldd	r24, Y+9	; 0x09
    205c:	9a 85       	ldd	r25, Y+10	; 0x0a
    205e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <HLCD_voidInit+0x4c4>
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	89 83       	std	Y+1, r24	; 0x01

	// Wait for more than 39us
	_delay_ms(1);
}
    207e:	ca 5b       	subi	r28, 0xBA	; 186
    2080:	df 4f       	sbci	r29, 0xFF	; 255
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	08 95       	ret

00002096 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	2e 97       	sbiw	r28, 0x0e	; 14
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	0e 94 9d 0c 	call	0x193a	; 0x193a <HLCD_voidSendCommand>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	a0 e0       	ldi	r26, 0x00	; 0
    20b6:	b0 e4       	ldi	r27, 0x40	; 64
    20b8:	8b 87       	std	Y+11, r24	; 0x0b
    20ba:	9c 87       	std	Y+12, r25	; 0x0c
    20bc:	ad 87       	std	Y+13, r26	; 0x0d
    20be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a ef       	ldi	r20, 0xFA	; 250
    20ce:	54 e4       	ldi	r21, 0x44	; 68
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8f 83       	std	Y+7, r24	; 0x07
    20da:	98 87       	std	Y+8, r25	; 0x08
    20dc:	a9 87       	std	Y+9, r26	; 0x09
    20de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f4:	88 23       	and	r24, r24
    20f6:	2c f4       	brge	.+10     	; 0x2102 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	3f c0       	rjmp	.+126    	; 0x2180 <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    2102:	6f 81       	ldd	r22, Y+7	; 0x07
    2104:	78 85       	ldd	r23, Y+8	; 0x08
    2106:	89 85       	ldd	r24, Y+9	; 0x09
    2108:	9a 85       	ldd	r25, Y+10	; 0x0a
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2116:	18 16       	cp	r1, r24
    2118:	4c f5       	brge	.+82     	; 0x216c <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211a:	6b 85       	ldd	r22, Y+11	; 0x0b
    211c:	7c 85       	ldd	r23, Y+12	; 0x0c
    211e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2120:	9e 85       	ldd	r25, Y+14	; 0x0e
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e2       	ldi	r20, 0x20	; 32
    2128:	51 e4       	ldi	r21, 0x41	; 65
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	0f c0       	rjmp	.+30     	; 0x2162 <HLCD_voidClearDisplay+0xcc>
    2144:	88 ec       	ldi	r24, 0xC8	; 200
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9c 83       	std	Y+4, r25	; 0x04
    214a:	8b 83       	std	Y+3, r24	; 0x03
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <HLCD_voidClearDisplay+0xba>
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	69 f7       	brne	.-38     	; 0x2144 <HLCD_voidClearDisplay+0xae>
    216a:	14 c0       	rjmp	.+40     	; 0x2194 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9e 83       	std	Y+6, r25	; 0x06
    217e:	8d 83       	std	Y+5, r24	; 0x05
    2180:	8d 81       	ldd	r24, Y+5	; 0x05
    2182:	9e 81       	ldd	r25, Y+6	; 0x06
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <HLCD_voidClearDisplay+0xf6>
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01

	// Wait for more than 1.53ms
	_delay_ms(2);
}
    2194:	2e 96       	adiw	r28, 0x0e	; 14
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *A_u8PtrToString)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <HLCD_voidSendString+0x6>
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	0b c0       	rjmp	.+22     	; 0x21cc <HLCD_voidSendString+0x26>
	while(*A_u8PtrToString > 0)
	{
		HLCD_voidSendData(*A_u8PtrToString++);
    21b6:	e9 81       	ldd	r30, Y+1	; 0x01
    21b8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ba:	20 81       	ld	r18, Z
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	9a 81       	ldd	r25, Y+2	; 0x02
    21c0:	01 96       	adiw	r24, 0x01	; 1
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	82 2f       	mov	r24, r18
    21c8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <HLCD_voidSendData>
	_delay_ms(2);
}

void HLCD_voidSendString(u8 *A_u8PtrToString)
{
	while(*A_u8PtrToString > 0)
    21cc:	e9 81       	ldd	r30, Y+1	; 0x01
    21ce:	fa 81       	ldd	r31, Y+2	; 0x02
    21d0:	80 81       	ld	r24, Z
    21d2:	88 23       	and	r24, r24
    21d4:	81 f7       	brne	.-32     	; 0x21b6 <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*A_u8PtrToString++);
	}
}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <HLCD_voidGoToPos>:

void HLCD_voidGoToPos(LCD_ROWS A_RowNo, LCD_COLS A_ColNo)
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <HLCD_voidGoToPos+0x6>
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <HLCD_voidGoToPos+0x8>
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_RowNo)
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	3c 83       	std	Y+4, r19	; 0x04
    21f8:	2b 83       	std	Y+3, r18	; 0x03
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	9c 81       	ldd	r25, Y+4	; 0x04
    21fe:	81 30       	cpi	r24, 0x01	; 1
    2200:	91 05       	cpc	r25, r1
    2202:	31 f0       	breq	.+12     	; 0x2210 <HLCD_voidGoToPos+0x30>
    2204:	2b 81       	ldd	r18, Y+3	; 0x03
    2206:	3c 81       	ldd	r19, Y+4	; 0x04
    2208:	22 30       	cpi	r18, 0x02	; 2
    220a:	31 05       	cpc	r19, r1
    220c:	31 f0       	breq	.+12     	; 0x221a <HLCD_voidGoToPos+0x3a>
    220e:	09 c0       	rjmp	.+18     	; 0x2222 <HLCD_voidGoToPos+0x42>
	{
	case ROW1: HLCD_voidSendCommand(LCD_ROW1_ADDRESS + A_ColNo); break;
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	81 58       	subi	r24, 0x81	; 129
    2214:	0e 94 9d 0c 	call	0x193a	; 0x193a <HLCD_voidSendCommand>
    2218:	04 c0       	rjmp	.+8      	; 0x2222 <HLCD_voidGoToPos+0x42>
	case ROW2: HLCD_voidSendCommand(LCD_ROW2_ADDRESS + A_ColNo); break;
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	81 54       	subi	r24, 0x41	; 65
    221e:	0e 94 9d 0c 	call	0x193a	; 0x193a <HLCD_voidSendCommand>
	}
}
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(u32 A_u32Number)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	00 d0       	rcall	.+0      	; 0x2236 <HLCD_voidDisplayNumber+0x6>
    2236:	00 d0       	rcall	.+0      	; 0x2238 <HLCD_voidDisplayNumber+0x8>
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	9c 83       	std	Y+4, r25	; 0x04
    223e:	8b 83       	std	Y+3, r24	; 0x03
	u32 local_u32Number = 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9a 83       	std	Y+2, r25	; 0x02
    2246:	89 83       	std	Y+1, r24	; 0x01
	if(local_u32Number == 0)
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	31 f5       	brne	.+76     	; 0x229c <HLCD_voidDisplayNumber+0x6c>
	{
		HLCD_voidSendData('0');
    2250:	80 e3       	ldi	r24, 0x30	; 48
    2252:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <HLCD_voidSendData>
    2256:	40 c0       	rjmp	.+128    	; 0x22d8 <HLCD_voidDisplayNumber+0xa8>
	}
	else
	{
		while(A_u32Number !=0)
		{
			local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	9a 81       	ldd	r25, Y+2	; 0x02
    225c:	9c 01       	movw	r18, r24
    225e:	22 0f       	add	r18, r18
    2260:	33 1f       	adc	r19, r19
    2262:	c9 01       	movw	r24, r18
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	f9 01       	movw	r30, r18
    226e:	e8 0f       	add	r30, r24
    2270:	f9 1f       	adc	r31, r25
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	2a e0       	ldi	r18, 0x0A	; 10
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	b9 01       	movw	r22, r18
    227c:	0e 94 9f 13 	call	0x273e	; 0x273e <__udivmodhi4>
    2280:	8e 0f       	add	r24, r30
    2282:	9f 1f       	adc	r25, r31
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
			A_u32Number /= 10;
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	2a e0       	ldi	r18, 0x0A	; 10
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	b9 01       	movw	r22, r18
    2292:	0e 94 9f 13 	call	0x273e	; 0x273e <__udivmodhi4>
    2296:	cb 01       	movw	r24, r22
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
	{
		HLCD_voidSendData('0');
	}
	else
	{
		while(A_u32Number !=0)
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	d1 f6       	brne	.-76     	; 0x2258 <HLCD_voidDisplayNumber+0x28>
    22a4:	14 c0       	rjmp	.+40     	; 0x22ce <HLCD_voidDisplayNumber+0x9e>
			local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
			A_u32Number /= 10;
		}
		while(local_u32Number != 1)
		{
			HLCD_voidSendData(( (local_u32Number % 10) + 48 ));
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	9a 81       	ldd	r25, Y+2	; 0x02
    22aa:	2a e0       	ldi	r18, 0x0A	; 10
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	b9 01       	movw	r22, r18
    22b0:	0e 94 9f 13 	call	0x273e	; 0x273e <__udivmodhi4>
    22b4:	80 5d       	subi	r24, 0xD0	; 208
    22b6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <HLCD_voidSendData>
			local_u32Number /= 10;
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	9a 81       	ldd	r25, Y+2	; 0x02
    22be:	2a e0       	ldi	r18, 0x0A	; 10
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	b9 01       	movw	r22, r18
    22c4:	0e 94 9f 13 	call	0x273e	; 0x273e <__udivmodhi4>
    22c8:	cb 01       	movw	r24, r22
    22ca:	9a 83       	std	Y+2, r25	; 0x02
    22cc:	89 83       	std	Y+1, r24	; 0x01
		while(A_u32Number !=0)
		{
			local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
			A_u32Number /= 10;
		}
		while(local_u32Number != 1)
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	9a 81       	ldd	r25, Y+2	; 0x02
    22d2:	81 30       	cpi	r24, 0x01	; 1
    22d4:	91 05       	cpc	r25, r1
    22d6:	39 f7       	brne	.-50     	; 0x22a6 <HLCD_voidDisplayNumber+0x76>
		{
			HLCD_voidSendData(( (local_u32Number % 10) + 48 ));
			local_u32Number /= 10;
		}
	}
}
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <HLCD_voidSendSpecialCharacter>:

void HLCD_voidSendSpecialCharacter (u8 *A_pu8PatternArr, u8 A_u8PatternNo, LCD_ROWS A_RowNo, LCD_COLS A_ColNo)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	27 97       	sbiw	r28, 0x07	; 7
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	8b 83       	std	Y+3, r24	; 0x03
    22fe:	6d 83       	std	Y+5, r22	; 0x05
    2300:	4e 83       	std	Y+6, r20	; 0x06
    2302:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAddress;
	// Command 01Byte
	local_u8CGRAMAddress = A_u8PatternNo * 8;
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	88 0f       	add	r24, r24
    2314:	99 1f       	adc	r25, r25
    2316:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAddress,6);
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	80 64       	ori	r24, 0x40	; 64
    231c:	8a 83       	std	Y+2, r24	; 0x02
	//Send CGRAM Write Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	0e 94 9d 0c 	call	0x193a	; 0x193a <HLCD_voidSendCommand>

	// Send Custom Pattern to LCD CGRAM
	for(u8 i=0; i<8; i++)
    2324:	19 82       	std	Y+1, r1	; 0x01
    2326:	0e c0       	rjmp	.+28     	; 0x2344 <HLCD_voidSendSpecialCharacter+0x5e>
	{
		HLCD_voidSendData(A_pu8PatternArr[i]);
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	9c 81       	ldd	r25, Y+4	; 0x04
    2332:	fc 01       	movw	r30, r24
    2334:	e2 0f       	add	r30, r18
    2336:	f3 1f       	adc	r31, r19
    2338:	80 81       	ld	r24, Z
    233a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <HLCD_voidSendData>
	SET_BIT(local_u8CGRAMAddress,6);
	//Send CGRAM Write Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);

	// Send Custom Pattern to LCD CGRAM
	for(u8 i=0; i<8; i++)
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	8f 5f       	subi	r24, 0xFF	; 255
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	88 30       	cpi	r24, 0x08	; 8
    2348:	78 f3       	brcs	.-34     	; 0x2328 <HLCD_voidSendSpecialCharacter+0x42>
	{
		HLCD_voidSendData(A_pu8PatternArr[i]);
	}

	// Send Position to DDRAM
	HLCD_voidGoToPos(A_RowNo,A_ColNo);
    234a:	8e 81       	ldd	r24, Y+6	; 0x06
    234c:	6f 81       	ldd	r22, Y+7	; 0x07
    234e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <HLCD_voidGoToPos>
	//Display Pattern
	HLCD_voidSendData(A_u8PatternNo);
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <HLCD_voidSendData>
}
    2358:	27 96       	adiw	r28, 0x07	; 7
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <HLED_voidSetLedStatus>:
#include"../include/HAL/LED/LED_Interface.h"
#include"../include/HAL/LED/LED_Private.h"
#include"../include/HAL/LED/LED_Cfg.h"

void HLED_voidSetLedStatus (DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo, LED_STATUS A_LedStatus)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <HLED_voidSetLedStatus+0x6>
    2370:	0f 92       	push	r0
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	6a 83       	std	Y+2, r22	; 0x02
    237a:	4b 83       	std	Y+3, r20	; 0x03
	MDIO_voidSetPinValue (A_DIOPort, A_DIOPinNo, A_LedStatus);
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	6a 81       	ldd	r22, Y+2	; 0x02
    2380:	4b 81       	ldd	r20, Y+3	; 0x03
    2382:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MDIO_voidSetPinValue>
}
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <HLED_voidToogleLedStatus>:

void HLED_voidToogleLedStatus (DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo)
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	00 d0       	rcall	.+0      	; 0x2398 <HLED_voidToogleLedStatus+0x6>
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue (A_DIOPort, A_DIOPinNo);
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	6a 81       	ldd	r22, Y+2	; 0x02
    23a4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <MDIO_voidTogglePinValue>
}
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <HSSD_voidDisplayNumber>:
#include"../include/HAL/SSD/SSD_Cfg.h"

#define F_CPU 8000000UL

void HSSD_voidDisplayNumber (DIO_PORTS A_DIOPORT, u8 A_u8Number)
{
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <HSSD_voidDisplayNumber+0x6>
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <HSSD_voidDisplayNumber+0x8>
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8Number)
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	3c 83       	std	Y+4, r19	; 0x04
    23ca:	2b 83       	std	Y+3, r18	; 0x03
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	84 30       	cpi	r24, 0x04	; 4
    23d2:	91 05       	cpc	r25, r1
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <HSSD_voidDisplayNumber+0x26>
    23d6:	55 c0       	rjmp	.+170    	; 0x2482 <HSSD_voidDisplayNumber+0xd0>
    23d8:	2b 81       	ldd	r18, Y+3	; 0x03
    23da:	3c 81       	ldd	r19, Y+4	; 0x04
    23dc:	25 30       	cpi	r18, 0x05	; 5
    23de:	31 05       	cpc	r19, r1
    23e0:	dc f4       	brge	.+54     	; 0x2418 <HSSD_voidDisplayNumber+0x66>
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	91 05       	cpc	r25, r1
    23ea:	09 f4       	brne	.+2      	; 0x23ee <HSSD_voidDisplayNumber+0x3c>
    23ec:	3b c0       	rjmp	.+118    	; 0x2464 <HSSD_voidDisplayNumber+0xb2>
    23ee:	2b 81       	ldd	r18, Y+3	; 0x03
    23f0:	3c 81       	ldd	r19, Y+4	; 0x04
    23f2:	22 30       	cpi	r18, 0x02	; 2
    23f4:	31 05       	cpc	r19, r1
    23f6:	2c f4       	brge	.+10     	; 0x2402 <HSSD_voidDisplayNumber+0x50>
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	69 f1       	breq	.+90     	; 0x245a <HSSD_voidDisplayNumber+0xa8>
    2400:	5d c0       	rjmp	.+186    	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
    2402:	2b 81       	ldd	r18, Y+3	; 0x03
    2404:	3c 81       	ldd	r19, Y+4	; 0x04
    2406:	22 30       	cpi	r18, 0x02	; 2
    2408:	31 05       	cpc	r19, r1
    240a:	89 f1       	breq	.+98     	; 0x246e <HSSD_voidDisplayNumber+0xbc>
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	83 30       	cpi	r24, 0x03	; 3
    2412:	91 05       	cpc	r25, r1
    2414:	89 f1       	breq	.+98     	; 0x2478 <HSSD_voidDisplayNumber+0xc6>
    2416:	52 c0       	rjmp	.+164    	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
    2418:	2b 81       	ldd	r18, Y+3	; 0x03
    241a:	3c 81       	ldd	r19, Y+4	; 0x04
    241c:	27 30       	cpi	r18, 0x07	; 7
    241e:	31 05       	cpc	r19, r1
    2420:	09 f4       	brne	.+2      	; 0x2424 <HSSD_voidDisplayNumber+0x72>
    2422:	3e c0       	rjmp	.+124    	; 0x24a0 <HSSD_voidDisplayNumber+0xee>
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	88 30       	cpi	r24, 0x08	; 8
    242a:	91 05       	cpc	r25, r1
    242c:	5c f4       	brge	.+22     	; 0x2444 <HSSD_voidDisplayNumber+0x92>
    242e:	2b 81       	ldd	r18, Y+3	; 0x03
    2430:	3c 81       	ldd	r19, Y+4	; 0x04
    2432:	25 30       	cpi	r18, 0x05	; 5
    2434:	31 05       	cpc	r19, r1
    2436:	51 f1       	breq	.+84     	; 0x248c <HSSD_voidDisplayNumber+0xda>
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	9c 81       	ldd	r25, Y+4	; 0x04
    243c:	86 30       	cpi	r24, 0x06	; 6
    243e:	91 05       	cpc	r25, r1
    2440:	51 f1       	breq	.+84     	; 0x2496 <HSSD_voidDisplayNumber+0xe4>
    2442:	3c c0       	rjmp	.+120    	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
    2444:	2b 81       	ldd	r18, Y+3	; 0x03
    2446:	3c 81       	ldd	r19, Y+4	; 0x04
    2448:	28 30       	cpi	r18, 0x08	; 8
    244a:	31 05       	cpc	r19, r1
    244c:	71 f1       	breq	.+92     	; 0x24aa <HSSD_voidDisplayNumber+0xf8>
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	89 30       	cpi	r24, 0x09	; 9
    2454:	91 05       	cpc	r25, r1
    2456:	71 f1       	breq	.+92     	; 0x24b4 <HSSD_voidDisplayNumber+0x102>
    2458:	31 c0       	rjmp	.+98     	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
	{
	case 0: MDIO_voidSetPortValue (A_DIOPORT,ZERO);  break;
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	6f e3       	ldi	r22, 0x3F	; 63
    245e:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>
    2462:	2c c0       	rjmp	.+88     	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
	case 1: MDIO_voidSetPortValue (A_DIOPORT,ONE);   break;
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	66 e0       	ldi	r22, 0x06	; 6
    2468:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>
    246c:	27 c0       	rjmp	.+78     	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
	case 2: MDIO_voidSetPortValue (A_DIOPORT,TWO);   break;
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	6b e5       	ldi	r22, 0x5B	; 91
    2472:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>
    2476:	22 c0       	rjmp	.+68     	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
	case 3: MDIO_voidSetPortValue (A_DIOPORT,THREE); break;
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	6f e4       	ldi	r22, 0x4F	; 79
    247c:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>
    2480:	1d c0       	rjmp	.+58     	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
	case 4: MDIO_voidSetPortValue (A_DIOPORT,FOUR);  break;
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	66 e6       	ldi	r22, 0x66	; 102
    2486:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>
    248a:	18 c0       	rjmp	.+48     	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
	case 5: MDIO_voidSetPortValue (A_DIOPORT,FIVE);  break;
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	6d e6       	ldi	r22, 0x6D	; 109
    2490:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>
    2494:	13 c0       	rjmp	.+38     	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
	case 6: MDIO_voidSetPortValue (A_DIOPORT,SIX);   break;
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	6d e7       	ldi	r22, 0x7D	; 125
    249a:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>
    249e:	0e c0       	rjmp	.+28     	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
	case 7: MDIO_voidSetPortValue (A_DIOPORT,SEVEN); break;
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	67 e0       	ldi	r22, 0x07	; 7
    24a4:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>
    24a8:	09 c0       	rjmp	.+18     	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
	case 8: MDIO_voidSetPortValue (A_DIOPORT,EIGHT); break;
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	6f e7       	ldi	r22, 0x7F	; 127
    24ae:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>
    24b2:	04 c0       	rjmp	.+8      	; 0x24bc <HSSD_voidDisplayNumber+0x10a>
	case 9: MDIO_voidSetPortValue (A_DIOPORT,NINE);  break;
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	6f e6       	ldi	r22, 0x6F	; 111
    24b8:	0e 94 42 0a 	call	0x1484	; 0x1484 <MDIO_voidSetPortValue>
	default: break;
	}
}
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <HSSD_voidDisplayNumberAscending>:

void HSSD_voidDisplayNumberAscending (DIO_PORTS A_DIOPORT, u16 A_u16DelayinMS)
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	62 97       	sbiw	r28, 0x12	; 18
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	88 8b       	std	Y+16, r24	; 0x10
    24e0:	7a 8b       	std	Y+18, r23	; 0x12
    24e2:	69 8b       	std	Y+17, r22	; 0x11
	for (u8 i=0; i<10; i++)
    24e4:	1f 86       	std	Y+15, r1	; 0x0f
    24e6:	80 c0       	rjmp	.+256    	; 0x25e8 <HSSD_voidDisplayNumberAscending+0x11e>
	{
		HSSD_voidDisplayNumber(A_DIOPORT,i);
    24e8:	88 89       	ldd	r24, Y+16	; 0x10
    24ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    24ec:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <HSSD_voidDisplayNumber>
		_delay_ms(A_u16DelayinMS);
    24f0:	89 89       	ldd	r24, Y+17	; 0x11
    24f2:	9a 89       	ldd	r25, Y+18	; 0x12
    24f4:	cc 01       	movw	r24, r24
    24f6:	a0 e0       	ldi	r26, 0x00	; 0
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	8b 87       	std	Y+11, r24	; 0x0b
    2508:	9c 87       	std	Y+12, r25	; 0x0c
    250a:	ad 87       	std	Y+13, r26	; 0x0d
    250c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2510:	7c 85       	ldd	r23, Y+12	; 0x0c
    2512:	8d 85       	ldd	r24, Y+13	; 0x0d
    2514:	9e 85       	ldd	r25, Y+14	; 0x0e
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a ef       	ldi	r20, 0xFA	; 250
    251c:	54 e4       	ldi	r21, 0x44	; 68
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	8f 83       	std	Y+7, r24	; 0x07
    2528:	98 87       	std	Y+8, r25	; 0x08
    252a:	a9 87       	std	Y+9, r26	; 0x09
    252c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    252e:	6f 81       	ldd	r22, Y+7	; 0x07
    2530:	78 85       	ldd	r23, Y+8	; 0x08
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e8       	ldi	r20, 0x80	; 128
    253c:	5f e3       	ldi	r21, 0x3F	; 63
    253e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2542:	88 23       	and	r24, r24
    2544:	2c f4       	brge	.+10     	; 0x2550 <HSSD_voidDisplayNumberAscending+0x86>
		__ticks = 1;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	3f c0       	rjmp	.+126    	; 0x25ce <HSSD_voidDisplayNumberAscending+0x104>
	else if (__tmp > 65535)
    2550:	6f 81       	ldd	r22, Y+7	; 0x07
    2552:	78 85       	ldd	r23, Y+8	; 0x08
    2554:	89 85       	ldd	r24, Y+9	; 0x09
    2556:	9a 85       	ldd	r25, Y+10	; 0x0a
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	3f ef       	ldi	r19, 0xFF	; 255
    255c:	4f e7       	ldi	r20, 0x7F	; 127
    255e:	57 e4       	ldi	r21, 0x47	; 71
    2560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2564:	18 16       	cp	r1, r24
    2566:	4c f5       	brge	.+82     	; 0x25ba <HSSD_voidDisplayNumberAscending+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2568:	6b 85       	ldd	r22, Y+11	; 0x0b
    256a:	7c 85       	ldd	r23, Y+12	; 0x0c
    256c:	8d 85       	ldd	r24, Y+13	; 0x0d
    256e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e2       	ldi	r20, 0x20	; 32
    2576:	51 e4       	ldi	r21, 0x41	; 65
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	bc 01       	movw	r22, r24
    2582:	cd 01       	movw	r24, r26
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	8d 83       	std	Y+5, r24	; 0x05
    2590:	0f c0       	rjmp	.+30     	; 0x25b0 <HSSD_voidDisplayNumberAscending+0xe6>
    2592:	88 ec       	ldi	r24, 0xC8	; 200
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9c 83       	std	Y+4, r25	; 0x04
    2598:	8b 83       	std	Y+3, r24	; 0x03
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	9c 81       	ldd	r25, Y+4	; 0x04
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <HSSD_voidDisplayNumberAscending+0xd4>
    25a2:	9c 83       	std	Y+4, r25	; 0x04
    25a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	69 f7       	brne	.-38     	; 0x2592 <HSSD_voidDisplayNumberAscending+0xc8>
    25b8:	14 c0       	rjmp	.+40     	; 0x25e2 <HSSD_voidDisplayNumberAscending+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ba:	6f 81       	ldd	r22, Y+7	; 0x07
    25bc:	78 85       	ldd	r23, Y+8	; 0x08
    25be:	89 85       	ldd	r24, Y+9	; 0x09
    25c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <HSSD_voidDisplayNumberAscending+0x110>
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	89 83       	std	Y+1, r24	; 0x01
	}
}

void HSSD_voidDisplayNumberAscending (DIO_PORTS A_DIOPORT, u16 A_u16DelayinMS)
{
	for (u8 i=0; i<10; i++)
    25e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e4:	8f 5f       	subi	r24, 0xFF	; 255
    25e6:	8f 87       	std	Y+15, r24	; 0x0f
    25e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ea:	8a 30       	cpi	r24, 0x0A	; 10
    25ec:	08 f4       	brcc	.+2      	; 0x25f0 <HSSD_voidDisplayNumberAscending+0x126>
    25ee:	7c cf       	rjmp	.-264    	; 0x24e8 <HSSD_voidDisplayNumberAscending+0x1e>
	{
		HSSD_voidDisplayNumber(A_DIOPORT,i);
		_delay_ms(A_u16DelayinMS);
	}
}
    25f0:	62 96       	adiw	r28, 0x12	; 18
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <HSSD_voidDisplayNumberDescending>:

void HSSD_voidDisplayNumberDescending (DIO_PORTS A_DIOPORT, u16 A_u16DelayinMS)
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	62 97       	sbiw	r28, 0x12	; 18
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	88 8b       	std	Y+16, r24	; 0x10
    2618:	7a 8b       	std	Y+18, r23	; 0x12
    261a:	69 8b       	std	Y+17, r22	; 0x11
	for (s8 i=9; i>=0; i--)
    261c:	89 e0       	ldi	r24, 0x09	; 9
    261e:	8f 87       	std	Y+15, r24	; 0x0f
    2620:	81 c0       	rjmp	.+258    	; 0x2724 <HSSD_voidDisplayNumberDescending+0x122>
	{
		HSSD_voidDisplayNumber(A_DIOPORT,i);
    2622:	9f 85       	ldd	r25, Y+15	; 0x0f
    2624:	88 89       	ldd	r24, Y+16	; 0x10
    2626:	69 2f       	mov	r22, r25
    2628:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <HSSD_voidDisplayNumber>
		_delay_ms(A_u16DelayinMS);
    262c:	89 89       	ldd	r24, Y+17	; 0x11
    262e:	9a 89       	ldd	r25, Y+18	; 0x12
    2630:	cc 01       	movw	r24, r24
    2632:	a0 e0       	ldi	r26, 0x00	; 0
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	8b 87       	std	Y+11, r24	; 0x0b
    2644:	9c 87       	std	Y+12, r25	; 0x0c
    2646:	ad 87       	std	Y+13, r26	; 0x0d
    2648:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264a:	6b 85       	ldd	r22, Y+11	; 0x0b
    264c:	7c 85       	ldd	r23, Y+12	; 0x0c
    264e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2650:	9e 85       	ldd	r25, Y+14	; 0x0e
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4a ef       	ldi	r20, 0xFA	; 250
    2658:	54 e4       	ldi	r21, 0x44	; 68
    265a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	8f 83       	std	Y+7, r24	; 0x07
    2664:	98 87       	std	Y+8, r25	; 0x08
    2666:	a9 87       	std	Y+9, r26	; 0x09
    2668:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    266a:	6f 81       	ldd	r22, Y+7	; 0x07
    266c:	78 85       	ldd	r23, Y+8	; 0x08
    266e:	89 85       	ldd	r24, Y+9	; 0x09
    2670:	9a 85       	ldd	r25, Y+10	; 0x0a
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e8       	ldi	r20, 0x80	; 128
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    267e:	88 23       	and	r24, r24
    2680:	2c f4       	brge	.+10     	; 0x268c <HSSD_voidDisplayNumberDescending+0x8a>
		__ticks = 1;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	3f c0       	rjmp	.+126    	; 0x270a <HSSD_voidDisplayNumberDescending+0x108>
	else if (__tmp > 65535)
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	3f ef       	ldi	r19, 0xFF	; 255
    2698:	4f e7       	ldi	r20, 0x7F	; 127
    269a:	57 e4       	ldi	r21, 0x47	; 71
    269c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a0:	18 16       	cp	r1, r24
    26a2:	4c f5       	brge	.+82     	; 0x26f6 <HSSD_voidDisplayNumberDescending+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e2       	ldi	r20, 0x20	; 32
    26b2:	51 e4       	ldi	r21, 0x41	; 65
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	9e 83       	std	Y+6, r25	; 0x06
    26ca:	8d 83       	std	Y+5, r24	; 0x05
    26cc:	0f c0       	rjmp	.+30     	; 0x26ec <HSSD_voidDisplayNumberDescending+0xea>
    26ce:	88 ec       	ldi	r24, 0xC8	; 200
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9c 83       	std	Y+4, r25	; 0x04
    26d4:	8b 83       	std	Y+3, r24	; 0x03
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <HSSD_voidDisplayNumberDescending+0xd8>
    26de:	9c 83       	std	Y+4, r25	; 0x04
    26e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	9e 83       	std	Y+6, r25	; 0x06
    26ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	8d 81       	ldd	r24, Y+5	; 0x05
    26ee:	9e 81       	ldd	r25, Y+6	; 0x06
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	69 f7       	brne	.-38     	; 0x26ce <HSSD_voidDisplayNumberDescending+0xcc>
    26f4:	14 c0       	rjmp	.+40     	; 0x271e <HSSD_voidDisplayNumberDescending+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f6:	6f 81       	ldd	r22, Y+7	; 0x07
    26f8:	78 85       	ldd	r23, Y+8	; 0x08
    26fa:	89 85       	ldd	r24, Y+9	; 0x09
    26fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9e 83       	std	Y+6, r25	; 0x06
    2708:	8d 83       	std	Y+5, r24	; 0x05
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	9e 81       	ldd	r25, Y+6	; 0x06
    270e:	9a 83       	std	Y+2, r25	; 0x02
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	9a 81       	ldd	r25, Y+2	; 0x02
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <HSSD_voidDisplayNumberDescending+0x114>
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01
	}
}

void HSSD_voidDisplayNumberDescending (DIO_PORTS A_DIOPORT, u16 A_u16DelayinMS)
{
	for (s8 i=9; i>=0; i--)
    271e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2720:	81 50       	subi	r24, 0x01	; 1
    2722:	8f 87       	std	Y+15, r24	; 0x0f
    2724:	8f 85       	ldd	r24, Y+15	; 0x0f
    2726:	88 23       	and	r24, r24
    2728:	0c f0       	brlt	.+2      	; 0x272c <HSSD_voidDisplayNumberDescending+0x12a>
    272a:	7b cf       	rjmp	.-266    	; 0x2622 <HSSD_voidDisplayNumberDescending+0x20>
	{
		HSSD_voidDisplayNumber(A_DIOPORT,i);
		_delay_ms(A_u16DelayinMS);
	}
}
    272c:	62 96       	adiw	r28, 0x12	; 18
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	f8 94       	cli
    2732:	de bf       	out	0x3e, r29	; 62
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	cd bf       	out	0x3d, r28	; 61
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <__udivmodhi4>:
    273e:	aa 1b       	sub	r26, r26
    2740:	bb 1b       	sub	r27, r27
    2742:	51 e1       	ldi	r21, 0x11	; 17
    2744:	07 c0       	rjmp	.+14     	; 0x2754 <__udivmodhi4_ep>

00002746 <__udivmodhi4_loop>:
    2746:	aa 1f       	adc	r26, r26
    2748:	bb 1f       	adc	r27, r27
    274a:	a6 17       	cp	r26, r22
    274c:	b7 07       	cpc	r27, r23
    274e:	10 f0       	brcs	.+4      	; 0x2754 <__udivmodhi4_ep>
    2750:	a6 1b       	sub	r26, r22
    2752:	b7 0b       	sbc	r27, r23

00002754 <__udivmodhi4_ep>:
    2754:	88 1f       	adc	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	5a 95       	dec	r21
    275a:	a9 f7       	brne	.-22     	; 0x2746 <__udivmodhi4_loop>
    275c:	80 95       	com	r24
    275e:	90 95       	com	r25
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	08 95       	ret

00002766 <__prologue_saves__>:
    2766:	2f 92       	push	r2
    2768:	3f 92       	push	r3
    276a:	4f 92       	push	r4
    276c:	5f 92       	push	r5
    276e:	6f 92       	push	r6
    2770:	7f 92       	push	r7
    2772:	8f 92       	push	r8
    2774:	9f 92       	push	r9
    2776:	af 92       	push	r10
    2778:	bf 92       	push	r11
    277a:	cf 92       	push	r12
    277c:	df 92       	push	r13
    277e:	ef 92       	push	r14
    2780:	ff 92       	push	r15
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	ca 1b       	sub	r28, r26
    2790:	db 0b       	sbc	r29, r27
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	09 94       	ijmp

0000279e <__epilogue_restores__>:
    279e:	2a 88       	ldd	r2, Y+18	; 0x12
    27a0:	39 88       	ldd	r3, Y+17	; 0x11
    27a2:	48 88       	ldd	r4, Y+16	; 0x10
    27a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    27b0:	b9 84       	ldd	r11, Y+9	; 0x09
    27b2:	c8 84       	ldd	r12, Y+8	; 0x08
    27b4:	df 80       	ldd	r13, Y+7	; 0x07
    27b6:	ee 80       	ldd	r14, Y+6	; 0x06
    27b8:	fd 80       	ldd	r15, Y+5	; 0x05
    27ba:	0c 81       	ldd	r16, Y+4	; 0x04
    27bc:	1b 81       	ldd	r17, Y+3	; 0x03
    27be:	aa 81       	ldd	r26, Y+2	; 0x02
    27c0:	b9 81       	ldd	r27, Y+1	; 0x01
    27c2:	ce 0f       	add	r28, r30
    27c4:	d1 1d       	adc	r29, r1
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	ed 01       	movw	r28, r26
    27d2:	08 95       	ret

000027d4 <_exit>:
    27d4:	f8 94       	cli

000027d6 <__stop_program>:
    27d6:	ff cf       	rjmp	.-2      	; 0x27d6 <__stop_program>
