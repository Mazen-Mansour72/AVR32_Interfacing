
UART_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000158  00800060  00001d5a  00001dee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001b8  008001b8  00001f46  2**0
                  ALLOC
  3 .stab         000016bc  00000000  00000000  00001f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001095  00000000  00000000  00003604  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00004699  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00004819  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000049ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000069fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00007b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00008b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00008d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00008fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000987b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__vector_13>
      38:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__vector_14>
      3c:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
      8a:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 eb       	ldi	r26, 0xB0	; 176
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 eb       	ldi	r24, 0xB0	; 176
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 54       	subi	r30, 0x48	; 72
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <main>:
#include"../include/HAL/SSD/SSD_Interface.h"

#define F_CPU 8000000UL

int main(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
     ce0:	0e 94 98 06 	call	0xd30	; 0xd30 <MDIO_voidInit>
	MUART_voidInit();
     ce4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <MUART_voidInit>

	u8 local_u8Value = 0;
     ce8:	19 82       	std	Y+1, r1	; 0x01
	MUART_voidSendStringSyncNonBlocking("Hello from MicroController \r\n");
     cea:	80 e6       	ldi	r24, 0x60	; 96
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("To turn on LED press O and to turn off press F \r\n");
     cf2:	8e e7       	ldi	r24, 0x7E	; 126
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <MUART_voidSendStringSyncNonBlocking>
	while(1)
	{
		local_u8Value = MUART_u8ReadByteSyncBlocking();
     cfa:	0e 94 65 0d 	call	0x1aca	; 0x1aca <MUART_u8ReadByteSyncBlocking>
     cfe:	89 83       	std	Y+1, r24	; 0x01
		if(local_u8Value == 'O' || local_u8Value == 'o')
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	8f 34       	cpi	r24, 0x4F	; 79
     d04:	19 f0       	breq	.+6      	; 0xd0c <main+0x36>
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	8f 36       	cpi	r24, 0x6F	; 111
     d0a:	31 f4       	brne	.+12     	; 0xd18 <main+0x42>
		{
			HLED_voidSetLedStatus(PORTA,PIN0,LED_ON);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	0e 94 93 0a 	call	0x1526	; 0x1526 <HLED_voidSetLedStatus>
     d16:	f1 cf       	rjmp	.-30     	; 0xcfa <main+0x24>
		}
		else if (local_u8Value == 'F' || local_u8Value == 'f')
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	86 34       	cpi	r24, 0x46	; 70
     d1c:	19 f0       	breq	.+6      	; 0xd24 <main+0x4e>
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	86 36       	cpi	r24, 0x66	; 102
     d22:	59 f7       	brne	.-42     	; 0xcfa <main+0x24>
		{
			HLED_voidSetLedStatus(PORTA,PIN0,LED_OFF);
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	0e 94 93 0a 	call	0x1526	; 0x1526 <HLED_voidSetLedStatus>
     d2e:	e5 cf       	rjmp	.-54     	; 0xcfa <main+0x24>

00000d30 <MDIO_voidInit>:
#include"../include/MCAL/DIO/DIO_Interface.h"
#include"../include/MCAL/DIO/DIO_Private.h"
#include"../include/MCAL/DIO/DIO_Cfg.h"

void MDIO_voidInit(void)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PORTA_PIN7_DIRECTION,PORTA_PIN6_DIRECTION,PORTA_PIN5_DIRECTION,PORTA_PIN4_DIRECTION,
     d38:	ea e3       	ldi	r30, 0x3A	; 58
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	80 83       	st	Z, r24
						PORTA_PIN3_DIRECTION,PORTA_PIN2_DIRECTION,PORTA_PIN1_DIRECTION,PORTA_PIN0_DIRECTION);

	DDRB_REG = CONC_BIT(PORTB_PIN7_DIRECTION,PORTB_PIN6_DIRECTION,PORTB_PIN5_DIRECTION,PORTB_PIN4_DIRECTION,
     d40:	e7 e3       	ldi	r30, 0x37	; 55
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	10 82       	st	Z, r1
						PORTB_PIN3_DIRECTION,PORTB_PIN2_DIRECTION,PORTB_PIN1_DIRECTION,PORTB_PIN0_DIRECTION);

	DDRC_REG = CONC_BIT(PORTC_PIN7_DIRECTION,PORTC_PIN6_DIRECTION,PORTC_PIN5_DIRECTION,PORTC_PIN4_DIRECTION,
     d46:	e4 e3       	ldi	r30, 0x34	; 52
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	10 82       	st	Z, r1
						PORTC_PIN3_DIRECTION,PORTC_PIN2_DIRECTION,PORTC_PIN1_DIRECTION,PORTC_PIN0_DIRECTION);

	DDRD_REG = CONC_BIT(PORTD_PIN7_DIRECTION,PORTD_PIN6_DIRECTION,PORTD_PIN5_DIRECTION,PORTD_PIN4_DIRECTION,
     d4c:	e1 e3       	ldi	r30, 0x31	; 49
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	80 83       	st	Z, r24
						PORTD_PIN3_DIRECTION,PORTD_PIN2_DIRECTION,PORTD_PIN1_DIRECTION,PORTD_PIN0_DIRECTION);

	PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE,
     d54:	eb e3       	ldi	r30, 0x3B	; 59
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	8e ef       	ldi	r24, 0xFE	; 254
     d5a:	80 83       	st	Z, r24
						 PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);

	PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE,
     d5c:	e8 e3       	ldi	r30, 0x38	; 56
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	89 ef       	ldi	r24, 0xF9	; 249
     d62:	80 83       	st	Z, r24
						 PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);

	PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE,
     d64:	e5 e3       	ldi	r30, 0x35	; 53
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	8e ef       	ldi	r24, 0xFE	; 254
     d6a:	80 83       	st	Z, r24
						 PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);

	PORTD_REG = CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE,
     d6c:	e2 e3       	ldi	r30, 0x32	; 50
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	8c ef       	ldi	r24, 0xFC	; 252
     d72:	80 83       	st	Z, r24
						 PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
}
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo, PIN_DIRECTION A_DIOPinDirection)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	2d 97       	sbiw	r28, 0x0d	; 13
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	6a 83       	std	Y+2, r22	; 0x02
     d92:	4b 83       	std	Y+3, r20	; 0x03
	//Input Validation
	if((A_DIOPort <= PORTD) && (A_DIOPinNo <= PIN7) && (A_DIOPinDirection <= DIO_OUTPUT))
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	08 f0       	brcs	.+2      	; 0xd9c <MDIO_voidSetPinDirection+0x22>
     d9a:	09 c1       	rjmp	.+530    	; 0xfae <MDIO_voidSetPinDirection+0x234>
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	88 30       	cpi	r24, 0x08	; 8
     da0:	08 f0       	brcs	.+2      	; 0xda4 <MDIO_voidSetPinDirection+0x2a>
     da2:	05 c1       	rjmp	.+522    	; 0xfae <MDIO_voidSetPinDirection+0x234>
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	08 f0       	brcs	.+2      	; 0xdac <MDIO_voidSetPinDirection+0x32>
     daa:	01 c1       	rjmp	.+514    	; 0xfae <MDIO_voidSetPinDirection+0x234>
	{
		switch(A_DIOPort)
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	3d 87       	std	Y+13, r19	; 0x0d
     db4:	2c 87       	std	Y+12, r18	; 0x0c
     db6:	8c 85       	ldd	r24, Y+12	; 0x0c
     db8:	9d 85       	ldd	r25, Y+13	; 0x0d
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	91 05       	cpc	r25, r1
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <MDIO_voidSetPinDirection+0x48>
     dc0:	4f c0       	rjmp	.+158    	; 0xe60 <MDIO_voidSetPinDirection+0xe6>
     dc2:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc4:	3d 85       	ldd	r19, Y+13	; 0x0d
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	2c f4       	brge	.+10     	; 0xdd6 <MDIO_voidSetPinDirection+0x5c>
     dcc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dce:	9d 85       	ldd	r25, Y+13	; 0x0d
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	71 f0       	breq	.+28     	; 0xdf0 <MDIO_voidSetPinDirection+0x76>
     dd4:	ec c0       	rjmp	.+472    	; 0xfae <MDIO_voidSetPinDirection+0x234>
     dd6:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd8:	3d 85       	ldd	r19, Y+13	; 0x0d
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	09 f4       	brne	.+2      	; 0xde2 <MDIO_voidSetPinDirection+0x68>
     de0:	77 c0       	rjmp	.+238    	; 0xed0 <MDIO_voidSetPinDirection+0x156>
     de2:	8c 85       	ldd	r24, Y+12	; 0x0c
     de4:	9d 85       	ldd	r25, Y+13	; 0x0d
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	91 05       	cpc	r25, r1
     dea:	09 f4       	brne	.+2      	; 0xdee <MDIO_voidSetPinDirection+0x74>
     dec:	a9 c0       	rjmp	.+338    	; 0xf40 <MDIO_voidSetPinDirection+0x1c6>
     dee:	df c0       	rjmp	.+446    	; 0xfae <MDIO_voidSetPinDirection+0x234>
		{
		case PORTA:
			switch(A_DIOPinDirection)
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	3b 87       	std	Y+11, r19	; 0x0b
     df8:	2a 87       	std	Y+10, r18	; 0x0a
     dfa:	8a 85       	ldd	r24, Y+10	; 0x0a
     dfc:	9b 85       	ldd	r25, Y+11	; 0x0b
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	31 f0       	breq	.+12     	; 0xe0e <MDIO_voidSetPinDirection+0x94>
     e02:	2a 85       	ldd	r18, Y+10	; 0x0a
     e04:	3b 85       	ldd	r19, Y+11	; 0x0b
     e06:	21 30       	cpi	r18, 0x01	; 1
     e08:	31 05       	cpc	r19, r1
     e0a:	b1 f0       	breq	.+44     	; 0xe38 <MDIO_voidSetPinDirection+0xbe>
     e0c:	d0 c0       	rjmp	.+416    	; 0xfae <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:  CLR_BIT(DDRA_REG,A_DIOPinNo); break;
     e0e:	aa e3       	ldi	r26, 0x3A	; 58
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ea e3       	ldi	r30, 0x3A	; 58
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <MDIO_voidSetPinDirection+0xb2>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <MDIO_voidSetPinDirection+0xae>
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	bb c0       	rjmp	.+374    	; 0xfae <MDIO_voidSetPinDirection+0x234>
			case DIO_OUTPUT: SET_BIT(DDRA_REG,A_DIOPinNo); break;
     e38:	aa e3       	ldi	r26, 0x3A	; 58
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ea e3       	ldi	r30, 0x3A	; 58
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <MDIO_voidSetPinDirection+0xdc>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <MDIO_voidSetPinDirection+0xd8>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	a7 c0       	rjmp	.+334    	; 0xfae <MDIO_voidSetPinDirection+0x234>
			}
			break;
		case PORTB:
			switch(A_DIOPinDirection)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	39 87       	std	Y+9, r19	; 0x09
     e68:	28 87       	std	Y+8, r18	; 0x08
     e6a:	88 85       	ldd	r24, Y+8	; 0x08
     e6c:	99 85       	ldd	r25, Y+9	; 0x09
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	31 f0       	breq	.+12     	; 0xe7e <MDIO_voidSetPinDirection+0x104>
     e72:	28 85       	ldd	r18, Y+8	; 0x08
     e74:	39 85       	ldd	r19, Y+9	; 0x09
     e76:	21 30       	cpi	r18, 0x01	; 1
     e78:	31 05       	cpc	r19, r1
     e7a:	b1 f0       	breq	.+44     	; 0xea8 <MDIO_voidSetPinDirection+0x12e>
     e7c:	98 c0       	rjmp	.+304    	; 0xfae <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:  CLR_BIT(DDRB_REG,A_DIOPinNo); break;
     e7e:	a7 e3       	ldi	r26, 0x37	; 55
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e7 e3       	ldi	r30, 0x37	; 55
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <MDIO_voidSetPinDirection+0x122>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <MDIO_voidSetPinDirection+0x11e>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	83 c0       	rjmp	.+262    	; 0xfae <MDIO_voidSetPinDirection+0x234>
			case DIO_OUTPUT: SET_BIT(DDRB_REG,A_DIOPinNo); break;
     ea8:	a7 e3       	ldi	r26, 0x37	; 55
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e7 e3       	ldi	r30, 0x37	; 55
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <MDIO_voidSetPinDirection+0x14c>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <MDIO_voidSetPinDirection+0x148>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	6f c0       	rjmp	.+222    	; 0xfae <MDIO_voidSetPinDirection+0x234>
			}
			break;

		case PORTC:
			switch(A_DIOPinDirection)
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3f 83       	std	Y+7, r19	; 0x07
     ed8:	2e 83       	std	Y+6, r18	; 0x06
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	9f 81       	ldd	r25, Y+7	; 0x07
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	31 f0       	breq	.+12     	; 0xeee <MDIO_voidSetPinDirection+0x174>
     ee2:	2e 81       	ldd	r18, Y+6	; 0x06
     ee4:	3f 81       	ldd	r19, Y+7	; 0x07
     ee6:	21 30       	cpi	r18, 0x01	; 1
     ee8:	31 05       	cpc	r19, r1
     eea:	b1 f0       	breq	.+44     	; 0xf18 <MDIO_voidSetPinDirection+0x19e>
     eec:	60 c0       	rjmp	.+192    	; 0xfae <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:  CLR_BIT(DDRC_REG,A_DIOPinNo); break;
     eee:	a4 e3       	ldi	r26, 0x34	; 52
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e4 e3       	ldi	r30, 0x34	; 52
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <MDIO_voidSetPinDirection+0x192>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <MDIO_voidSetPinDirection+0x18e>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	4b c0       	rjmp	.+150    	; 0xfae <MDIO_voidSetPinDirection+0x234>
			case DIO_OUTPUT: SET_BIT(DDRC_REG,A_DIOPinNo); break;
     f18:	a4 e3       	ldi	r26, 0x34	; 52
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e4 e3       	ldi	r30, 0x34	; 52
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <MDIO_voidSetPinDirection+0x1bc>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <MDIO_voidSetPinDirection+0x1b8>
     f3a:	84 2b       	or	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	37 c0       	rjmp	.+110    	; 0xfae <MDIO_voidSetPinDirection+0x234>
			}
			break;

		case PORTD:
			switch(A_DIOPinDirection)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3d 83       	std	Y+5, r19	; 0x05
     f48:	2c 83       	std	Y+4, r18	; 0x04
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	31 f0       	breq	.+12     	; 0xf5e <MDIO_voidSetPinDirection+0x1e4>
     f52:	2c 81       	ldd	r18, Y+4	; 0x04
     f54:	3d 81       	ldd	r19, Y+5	; 0x05
     f56:	21 30       	cpi	r18, 0x01	; 1
     f58:	31 05       	cpc	r19, r1
     f5a:	b1 f0       	breq	.+44     	; 0xf88 <MDIO_voidSetPinDirection+0x20e>
     f5c:	28 c0       	rjmp	.+80     	; 0xfae <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:  CLR_BIT(DDRD_REG,A_DIOPinNo); break;
     f5e:	a1 e3       	ldi	r26, 0x31	; 49
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e1 e3       	ldi	r30, 0x31	; 49
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <MDIO_voidSetPinDirection+0x202>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <MDIO_voidSetPinDirection+0x1fe>
     f80:	80 95       	com	r24
     f82:	84 23       	and	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	13 c0       	rjmp	.+38     	; 0xfae <MDIO_voidSetPinDirection+0x234>
			case DIO_OUTPUT: SET_BIT(DDRD_REG,A_DIOPinNo); break;
     f88:	a1 e3       	ldi	r26, 0x31	; 49
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e1 e3       	ldi	r30, 0x31	; 49
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <MDIO_voidSetPinDirection+0x22c>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <MDIO_voidSetPinDirection+0x228>
     faa:	84 2b       	or	r24, r20
     fac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fae:	2d 96       	adiw	r28, 0x0d	; 13
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo, DIO_VALUE A_DIOPinValue)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	2d 97       	sbiw	r28, 0x0d	; 13
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	6a 83       	std	Y+2, r22	; 0x02
     fd8:	4b 83       	std	Y+3, r20	; 0x03
	//Input Validation
	if((A_DIOPort <= PORTD) && (A_DIOPinNo <= PIN7) && (A_DIOPinValue <= DIO_SET))
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <MDIO_voidSetPinValue+0x22>
     fe0:	09 c1       	rjmp	.+530    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	88 30       	cpi	r24, 0x08	; 8
     fe6:	08 f0       	brcs	.+2      	; 0xfea <MDIO_voidSetPinValue+0x2a>
     fe8:	05 c1       	rjmp	.+522    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	82 30       	cpi	r24, 0x02	; 2
     fee:	08 f0       	brcs	.+2      	; 0xff2 <MDIO_voidSetPinValue+0x32>
     ff0:	01 c1       	rjmp	.+514    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
	{
		switch(A_DIOPort)
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3d 87       	std	Y+13, r19	; 0x0d
     ffa:	2c 87       	std	Y+12, r18	; 0x0c
     ffc:	8c 85       	ldd	r24, Y+12	; 0x0c
     ffe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	91 05       	cpc	r25, r1
    1004:	09 f4       	brne	.+2      	; 0x1008 <MDIO_voidSetPinValue+0x48>
    1006:	4f c0       	rjmp	.+158    	; 0x10a6 <MDIO_voidSetPinValue+0xe6>
    1008:	2c 85       	ldd	r18, Y+12	; 0x0c
    100a:	3d 85       	ldd	r19, Y+13	; 0x0d
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	2c f4       	brge	.+10     	; 0x101c <MDIO_voidSetPinValue+0x5c>
    1012:	8c 85       	ldd	r24, Y+12	; 0x0c
    1014:	9d 85       	ldd	r25, Y+13	; 0x0d
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	71 f0       	breq	.+28     	; 0x1036 <MDIO_voidSetPinValue+0x76>
    101a:	ec c0       	rjmp	.+472    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
    101c:	2c 85       	ldd	r18, Y+12	; 0x0c
    101e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <MDIO_voidSetPinValue+0x68>
    1026:	77 c0       	rjmp	.+238    	; 0x1116 <MDIO_voidSetPinValue+0x156>
    1028:	8c 85       	ldd	r24, Y+12	; 0x0c
    102a:	9d 85       	ldd	r25, Y+13	; 0x0d
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	91 05       	cpc	r25, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <MDIO_voidSetPinValue+0x74>
    1032:	a9 c0       	rjmp	.+338    	; 0x1186 <MDIO_voidSetPinValue+0x1c6>
    1034:	df c0       	rjmp	.+446    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
		{
		case PORTA:
			switch(A_DIOPinValue)
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	3b 87       	std	Y+11, r19	; 0x0b
    103e:	2a 87       	std	Y+10, r18	; 0x0a
    1040:	8a 85       	ldd	r24, Y+10	; 0x0a
    1042:	9b 85       	ldd	r25, Y+11	; 0x0b
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	31 f0       	breq	.+12     	; 0x1054 <MDIO_voidSetPinValue+0x94>
    1048:	2a 85       	ldd	r18, Y+10	; 0x0a
    104a:	3b 85       	ldd	r19, Y+11	; 0x0b
    104c:	21 30       	cpi	r18, 0x01	; 1
    104e:	31 05       	cpc	r19, r1
    1050:	b1 f0       	breq	.+44     	; 0x107e <MDIO_voidSetPinValue+0xbe>
    1052:	d0 c0       	rjmp	.+416    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:  CLR_BIT(PORTA_REG,A_DIOPinNo); break;
    1054:	ab e3       	ldi	r26, 0x3B	; 59
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	eb e3       	ldi	r30, 0x3B	; 59
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <MDIO_voidSetPinValue+0xb2>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <MDIO_voidSetPinValue+0xae>
    1076:	80 95       	com	r24
    1078:	84 23       	and	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	bb c0       	rjmp	.+374    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
			case DIO_SET: 	 SET_BIT(PORTA_REG,A_DIOPinNo); break;
    107e:	ab e3       	ldi	r26, 0x3B	; 59
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	eb e3       	ldi	r30, 0x3B	; 59
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <MDIO_voidSetPinValue+0xdc>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <MDIO_voidSetPinValue+0xd8>
    10a0:	84 2b       	or	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	a7 c0       	rjmp	.+334    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
			}
			break;
		case PORTB:
			switch(A_DIOPinValue)
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	39 87       	std	Y+9, r19	; 0x09
    10ae:	28 87       	std	Y+8, r18	; 0x08
    10b0:	88 85       	ldd	r24, Y+8	; 0x08
    10b2:	99 85       	ldd	r25, Y+9	; 0x09
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	31 f0       	breq	.+12     	; 0x10c4 <MDIO_voidSetPinValue+0x104>
    10b8:	28 85       	ldd	r18, Y+8	; 0x08
    10ba:	39 85       	ldd	r19, Y+9	; 0x09
    10bc:	21 30       	cpi	r18, 0x01	; 1
    10be:	31 05       	cpc	r19, r1
    10c0:	b1 f0       	breq	.+44     	; 0x10ee <MDIO_voidSetPinValue+0x12e>
    10c2:	98 c0       	rjmp	.+304    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:  CLR_BIT(PORTB_REG,A_DIOPinNo); break;
    10c4:	a8 e3       	ldi	r26, 0x38	; 56
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e8 e3       	ldi	r30, 0x38	; 56
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <MDIO_voidSetPinValue+0x122>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <MDIO_voidSetPinValue+0x11e>
    10e6:	80 95       	com	r24
    10e8:	84 23       	and	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	83 c0       	rjmp	.+262    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
			case DIO_SET: 	 SET_BIT(PORTB_REG,A_DIOPinNo); break;
    10ee:	a8 e3       	ldi	r26, 0x38	; 56
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e3       	ldi	r30, 0x38	; 56
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <MDIO_voidSetPinValue+0x14c>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <MDIO_voidSetPinValue+0x148>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	6f c0       	rjmp	.+222    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
			}
			break;

		case PORTC:
			switch(A_DIOPinValue)
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	3f 83       	std	Y+7, r19	; 0x07
    111e:	2e 83       	std	Y+6, r18	; 0x06
    1120:	8e 81       	ldd	r24, Y+6	; 0x06
    1122:	9f 81       	ldd	r25, Y+7	; 0x07
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	31 f0       	breq	.+12     	; 0x1134 <MDIO_voidSetPinValue+0x174>
    1128:	2e 81       	ldd	r18, Y+6	; 0x06
    112a:	3f 81       	ldd	r19, Y+7	; 0x07
    112c:	21 30       	cpi	r18, 0x01	; 1
    112e:	31 05       	cpc	r19, r1
    1130:	b1 f0       	breq	.+44     	; 0x115e <MDIO_voidSetPinValue+0x19e>
    1132:	60 c0       	rjmp	.+192    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:  CLR_BIT(PORTC_REG,A_DIOPinNo); break;
    1134:	a5 e3       	ldi	r26, 0x35	; 53
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e3       	ldi	r30, 0x35	; 53
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <MDIO_voidSetPinValue+0x192>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <MDIO_voidSetPinValue+0x18e>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	4b c0       	rjmp	.+150    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
			case DIO_SET: 	 SET_BIT(PORTC_REG,A_DIOPinNo); break;
    115e:	a5 e3       	ldi	r26, 0x35	; 53
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 e3       	ldi	r30, 0x35	; 53
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <MDIO_voidSetPinValue+0x1bc>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <MDIO_voidSetPinValue+0x1b8>
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	37 c0       	rjmp	.+110    	; 0x11f4 <MDIO_voidSetPinValue+0x234>
			}
			break;

		case PORTD:
			switch(A_DIOPinValue)
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	3d 83       	std	Y+5, r19	; 0x05
    118e:	2c 83       	std	Y+4, r18	; 0x04
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	31 f0       	breq	.+12     	; 0x11a4 <MDIO_voidSetPinValue+0x1e4>
    1198:	2c 81       	ldd	r18, Y+4	; 0x04
    119a:	3d 81       	ldd	r19, Y+5	; 0x05
    119c:	21 30       	cpi	r18, 0x01	; 1
    119e:	31 05       	cpc	r19, r1
    11a0:	b1 f0       	breq	.+44     	; 0x11ce <MDIO_voidSetPinValue+0x20e>
    11a2:	28 c0       	rjmp	.+80     	; 0x11f4 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:  CLR_BIT(PORTD_REG,A_DIOPinNo); break;
    11a4:	a2 e3       	ldi	r26, 0x32	; 50
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e2 e3       	ldi	r30, 0x32	; 50
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <MDIO_voidSetPinValue+0x202>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <MDIO_voidSetPinValue+0x1fe>
    11c6:	80 95       	com	r24
    11c8:	84 23       	and	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	13 c0       	rjmp	.+38     	; 0x11f4 <MDIO_voidSetPinValue+0x234>
			case DIO_SET: 	 SET_BIT(PORTD_REG,A_DIOPinNo); break;
    11ce:	a2 e3       	ldi	r26, 0x32	; 50
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e2 e3       	ldi	r30, 0x32	; 50
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <MDIO_voidSetPinValue+0x22c>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <MDIO_voidSetPinValue+0x228>
    11f0:	84 2b       	or	r24, r20
    11f2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11f4:	2d 96       	adiw	r28, 0x0d	; 13
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <MDIO_voidTogglePinValue+0x6>
    120c:	00 d0       	rcall	.+0      	; 0x120e <MDIO_voidTogglePinValue+0x8>
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if((A_DIOPort <= PORTD) && (A_DIOPinNo <= PIN7))
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	08 f0       	brcs	.+2      	; 0x121e <MDIO_voidTogglePinValue+0x18>
    121c:	72 c0       	rjmp	.+228    	; 0x1302 <MDIO_voidTogglePinValue+0xfc>
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	88 30       	cpi	r24, 0x08	; 8
    1222:	08 f0       	brcs	.+2      	; 0x1226 <MDIO_voidTogglePinValue+0x20>
    1224:	6e c0       	rjmp	.+220    	; 0x1302 <MDIO_voidTogglePinValue+0xfc>
	{
		switch(A_DIOPort)
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3c 83       	std	Y+4, r19	; 0x04
    122e:	2b 83       	std	Y+3, r18	; 0x03
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	91 05       	cpc	r25, r1
    1238:	49 f1       	breq	.+82     	; 0x128c <MDIO_voidTogglePinValue+0x86>
    123a:	2b 81       	ldd	r18, Y+3	; 0x03
    123c:	3c 81       	ldd	r19, Y+4	; 0x04
    123e:	22 30       	cpi	r18, 0x02	; 2
    1240:	31 05       	cpc	r19, r1
    1242:	2c f4       	brge	.+10     	; 0x124e <MDIO_voidTogglePinValue+0x48>
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	61 f0       	breq	.+24     	; 0x1264 <MDIO_voidTogglePinValue+0x5e>
    124c:	5a c0       	rjmp	.+180    	; 0x1302 <MDIO_voidTogglePinValue+0xfc>
    124e:	2b 81       	ldd	r18, Y+3	; 0x03
    1250:	3c 81       	ldd	r19, Y+4	; 0x04
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	71 f1       	breq	.+92     	; 0x12b4 <MDIO_voidTogglePinValue+0xae>
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	91 05       	cpc	r25, r1
    1260:	e9 f1       	breq	.+122    	; 0x12dc <MDIO_voidTogglePinValue+0xd6>
    1262:	4f c0       	rjmp	.+158    	; 0x1302 <MDIO_voidTogglePinValue+0xfc>
		{
		case PORTA: TOGGLE_BIT(PORTA_REG,A_DIOPinNo); break;
    1264:	ab e3       	ldi	r26, 0x3B	; 59
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	eb e3       	ldi	r30, 0x3B	; 59
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <MDIO_voidTogglePinValue+0x7c>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <MDIO_voidTogglePinValue+0x78>
    1286:	84 27       	eor	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	3b c0       	rjmp	.+118    	; 0x1302 <MDIO_voidTogglePinValue+0xfc>
		case PORTB: TOGGLE_BIT(PORTB_REG,A_DIOPinNo); break;
    128c:	a8 e3       	ldi	r26, 0x38	; 56
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e8 e3       	ldi	r30, 0x38	; 56
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <MDIO_voidTogglePinValue+0xa4>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <MDIO_voidTogglePinValue+0xa0>
    12ae:	84 27       	eor	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	27 c0       	rjmp	.+78     	; 0x1302 <MDIO_voidTogglePinValue+0xfc>
		case PORTC: TOGGLE_BIT(PORTC_REG,A_DIOPinNo); break;
    12b4:	a5 e3       	ldi	r26, 0x35	; 53
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e3       	ldi	r30, 0x35	; 53
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <MDIO_voidTogglePinValue+0xcc>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <MDIO_voidTogglePinValue+0xc8>
    12d6:	84 27       	eor	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	13 c0       	rjmp	.+38     	; 0x1302 <MDIO_voidTogglePinValue+0xfc>
		case PORTD: TOGGLE_BIT(PORTD_REG,A_DIOPinNo); break;
    12dc:	a2 e3       	ldi	r26, 0x32	; 50
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e2 e3       	ldi	r30, 0x32	; 50
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <MDIO_voidTogglePinValue+0xf4>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <MDIO_voidTogglePinValue+0xf0>
    12fe:	84 27       	eor	r24, r20
    1300:	8c 93       	st	X, r24
		}
	}
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <MDIO_DIO_VALUEGetPinValue>:

DIO_VALUE MDIO_DIO_VALUEGetPinValue(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <MDIO_DIO_VALUEGetPinValue+0x6>
    1316:	00 d0       	rcall	.+0      	; 0x1318 <MDIO_DIO_VALUEGetPinValue+0x8>
    1318:	0f 92       	push	r0
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	8a 83       	std	Y+2, r24	; 0x02
    1320:	6b 83       	std	Y+3, r22	; 0x03
	u8 PinRead = 255;
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	89 83       	std	Y+1, r24	; 0x01
	//Input Validation
	if((A_DIOPort <= PORTD) && (A_DIOPinNo <= PIN7))
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	08 f0       	brcs	.+2      	; 0x132e <MDIO_DIO_VALUEGetPinValue+0x1e>
    132c:	6b c0       	rjmp	.+214    	; 0x1404 <MDIO_DIO_VALUEGetPinValue+0xf4>
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	88 30       	cpi	r24, 0x08	; 8
    1332:	08 f0       	brcs	.+2      	; 0x1336 <MDIO_DIO_VALUEGetPinValue+0x26>
    1334:	67 c0       	rjmp	.+206    	; 0x1404 <MDIO_DIO_VALUEGetPinValue+0xf4>
	{
		switch(A_DIOPort)
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3d 83       	std	Y+5, r19	; 0x05
    133e:	2c 83       	std	Y+4, r18	; 0x04
    1340:	4c 81       	ldd	r20, Y+4	; 0x04
    1342:	5d 81       	ldd	r21, Y+5	; 0x05
    1344:	41 30       	cpi	r20, 0x01	; 1
    1346:	51 05       	cpc	r21, r1
    1348:	41 f1       	breq	.+80     	; 0x139a <MDIO_DIO_VALUEGetPinValue+0x8a>
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	91 05       	cpc	r25, r1
    1352:	34 f4       	brge	.+12     	; 0x1360 <MDIO_DIO_VALUEGetPinValue+0x50>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	21 15       	cp	r18, r1
    135a:	31 05       	cpc	r19, r1
    135c:	61 f0       	breq	.+24     	; 0x1376 <MDIO_DIO_VALUEGetPinValue+0x66>
    135e:	52 c0       	rjmp	.+164    	; 0x1404 <MDIO_DIO_VALUEGetPinValue+0xf4>
    1360:	4c 81       	ldd	r20, Y+4	; 0x04
    1362:	5d 81       	ldd	r21, Y+5	; 0x05
    1364:	42 30       	cpi	r20, 0x02	; 2
    1366:	51 05       	cpc	r21, r1
    1368:	51 f1       	breq	.+84     	; 0x13be <MDIO_DIO_VALUEGetPinValue+0xae>
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	9d 81       	ldd	r25, Y+5	; 0x05
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	91 05       	cpc	r25, r1
    1372:	b9 f1       	breq	.+110    	; 0x13e2 <MDIO_DIO_VALUEGetPinValue+0xd2>
    1374:	47 c0       	rjmp	.+142    	; 0x1404 <MDIO_DIO_VALUEGetPinValue+0xf4>
		{
		case PORTA: PinRead = GET_BIT(PORTA_REG,A_DIOPinNo); break;
    1376:	eb e3       	ldi	r30, 0x3B	; 59
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <MDIO_DIO_VALUEGetPinValue+0x7e>
    138a:	55 95       	asr	r21
    138c:	47 95       	ror	r20
    138e:	8a 95       	dec	r24
    1390:	e2 f7       	brpl	.-8      	; 0x138a <MDIO_DIO_VALUEGetPinValue+0x7a>
    1392:	ca 01       	movw	r24, r20
    1394:	81 70       	andi	r24, 0x01	; 1
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	35 c0       	rjmp	.+106    	; 0x1404 <MDIO_DIO_VALUEGetPinValue+0xf4>
		case PORTB: PinRead = GET_BIT(PORTB_REG,A_DIOPinNo); break;
    139a:	e8 e3       	ldi	r30, 0x38	; 56
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <MDIO_DIO_VALUEGetPinValue+0xa2>
    13ae:	55 95       	asr	r21
    13b0:	47 95       	ror	r20
    13b2:	8a 95       	dec	r24
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <MDIO_DIO_VALUEGetPinValue+0x9e>
    13b6:	ca 01       	movw	r24, r20
    13b8:	81 70       	andi	r24, 0x01	; 1
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	23 c0       	rjmp	.+70     	; 0x1404 <MDIO_DIO_VALUEGetPinValue+0xf4>
		case PORTC: PinRead = GET_BIT(PORTC_REG,A_DIOPinNo); break;
    13be:	e5 e3       	ldi	r30, 0x35	; 53
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a9 01       	movw	r20, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <MDIO_DIO_VALUEGetPinValue+0xc6>
    13d2:	55 95       	asr	r21
    13d4:	47 95       	ror	r20
    13d6:	8a 95       	dec	r24
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <MDIO_DIO_VALUEGetPinValue+0xc2>
    13da:	ca 01       	movw	r24, r20
    13dc:	81 70       	andi	r24, 0x01	; 1
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	11 c0       	rjmp	.+34     	; 0x1404 <MDIO_DIO_VALUEGetPinValue+0xf4>
		case PORTD: PinRead = GET_BIT(PORTD_REG,A_DIOPinNo); break;
    13e2:	e2 e3       	ldi	r30, 0x32	; 50
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	88 2f       	mov	r24, r24
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	a9 01       	movw	r20, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <MDIO_DIO_VALUEGetPinValue+0xea>
    13f6:	55 95       	asr	r21
    13f8:	47 95       	ror	r20
    13fa:	8a 95       	dec	r24
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <MDIO_DIO_VALUEGetPinValue+0xe6>
    13fe:	ca 01       	movw	r24, r20
    1400:	81 70       	andi	r24, 0x01	; 1
    1402:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return PinRead;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(DIO_PORTS A_DIOPort, u8 A_PortDirection)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <MDIO_voidSetPortDirection+0x6>
    141c:	00 d0       	rcall	.+0      	; 0x141e <MDIO_voidSetPortDirection+0x8>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if(A_DIOPort <= PORTD)
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	84 30       	cpi	r24, 0x04	; 4
    142a:	90 f5       	brcc	.+100    	; 0x1490 <MDIO_voidSetPortDirection+0x7a>
	{
		switch(A_DIOPort)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	3c 83       	std	Y+4, r19	; 0x04
    1434:	2b 83       	std	Y+3, r18	; 0x03
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	91 05       	cpc	r25, r1
    143e:	d1 f0       	breq	.+52     	; 0x1474 <MDIO_voidSetPortDirection+0x5e>
    1440:	2b 81       	ldd	r18, Y+3	; 0x03
    1442:	3c 81       	ldd	r19, Y+4	; 0x04
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	2c f4       	brge	.+10     	; 0x1454 <MDIO_voidSetPortDirection+0x3e>
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	61 f0       	breq	.+24     	; 0x146a <MDIO_voidSetPortDirection+0x54>
    1452:	1e c0       	rjmp	.+60     	; 0x1490 <MDIO_voidSetPortDirection+0x7a>
    1454:	2b 81       	ldd	r18, Y+3	; 0x03
    1456:	3c 81       	ldd	r19, Y+4	; 0x04
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	81 f0       	breq	.+32     	; 0x147e <MDIO_voidSetPortDirection+0x68>
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	91 05       	cpc	r25, r1
    1466:	81 f0       	breq	.+32     	; 0x1488 <MDIO_voidSetPortDirection+0x72>
    1468:	13 c0       	rjmp	.+38     	; 0x1490 <MDIO_voidSetPortDirection+0x7a>
		{
		case PORTA: DDRA_REG = A_PortDirection; break;
    146a:	ea e3       	ldi	r30, 0x3A	; 58
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	80 83       	st	Z, r24
    1472:	0e c0       	rjmp	.+28     	; 0x1490 <MDIO_voidSetPortDirection+0x7a>
		case PORTB: DDRB_REG = A_PortDirection; break;
    1474:	e7 e3       	ldi	r30, 0x37	; 55
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	80 83       	st	Z, r24
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <MDIO_voidSetPortDirection+0x7a>
		case PORTC: DDRC_REG = A_PortDirection; break;
    147e:	e4 e3       	ldi	r30, 0x34	; 52
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	80 83       	st	Z, r24
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <MDIO_voidSetPortDirection+0x7a>
		case PORTD: DDRD_REG = A_PortDirection; break;
    1488:	e1 e3       	ldi	r30, 0x31	; 49
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	80 83       	st	Z, r24
		}
	}
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(DIO_PORTS A_DIOPort, u8 A_PortValue)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <MDIO_voidSetPortValue+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <MDIO_voidSetPortValue+0x8>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if(A_DIOPort <= PORTD)
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	90 f5       	brcc	.+100    	; 0x1518 <MDIO_voidSetPortValue+0x7a>
	{
		switch(A_DIOPort)
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3c 83       	std	Y+4, r19	; 0x04
    14bc:	2b 83       	std	Y+3, r18	; 0x03
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	d1 f0       	breq	.+52     	; 0x14fc <MDIO_voidSetPortValue+0x5e>
    14c8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ca:	3c 81       	ldd	r19, Y+4	; 0x04
    14cc:	22 30       	cpi	r18, 0x02	; 2
    14ce:	31 05       	cpc	r19, r1
    14d0:	2c f4       	brge	.+10     	; 0x14dc <MDIO_voidSetPortValue+0x3e>
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	61 f0       	breq	.+24     	; 0x14f2 <MDIO_voidSetPortValue+0x54>
    14da:	1e c0       	rjmp	.+60     	; 0x1518 <MDIO_voidSetPortValue+0x7a>
    14dc:	2b 81       	ldd	r18, Y+3	; 0x03
    14de:	3c 81       	ldd	r19, Y+4	; 0x04
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	81 f0       	breq	.+32     	; 0x1506 <MDIO_voidSetPortValue+0x68>
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	81 f0       	breq	.+32     	; 0x1510 <MDIO_voidSetPortValue+0x72>
    14f0:	13 c0       	rjmp	.+38     	; 0x1518 <MDIO_voidSetPortValue+0x7a>
		{
		case PORTA: PORTA_REG = A_PortValue; break;
    14f2:	eb e3       	ldi	r30, 0x3B	; 59
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	80 83       	st	Z, r24
    14fa:	0e c0       	rjmp	.+28     	; 0x1518 <MDIO_voidSetPortValue+0x7a>
		case PORTB: PORTB_REG = A_PortValue; break;
    14fc:	e8 e3       	ldi	r30, 0x38	; 56
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	80 83       	st	Z, r24
    1504:	09 c0       	rjmp	.+18     	; 0x1518 <MDIO_voidSetPortValue+0x7a>
		case PORTC: PORTC_REG = A_PortValue; break;
    1506:	e5 e3       	ldi	r30, 0x35	; 53
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	80 83       	st	Z, r24
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <MDIO_voidSetPortValue+0x7a>
		case PORTD: PORTD_REG = A_PortValue; break;
    1510:	e2 e3       	ldi	r30, 0x32	; 50
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	80 83       	st	Z, r24
		}
	}
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <HLED_voidSetLedStatus>:
#include"../include/HAL/LED/LED_Interface.h"
#include"../include/HAL/LED/LED_Private.h"
#include"../include/HAL/LED/LED_Cfg.h"

void HLED_voidSetLedStatus(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo, LED_STATUS A_LedStatus)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <HLED_voidSetLedStatus+0x6>
    152c:	0f 92       	push	r0
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	6a 83       	std	Y+2, r22	; 0x02
    1536:	4b 83       	std	Y+3, r20	; 0x03
	MDIO_voidSetPinValue(A_DIOPort,A_DIOPinNo,A_LedStatus);
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	6a 81       	ldd	r22, Y+2	; 0x02
    153c:	4b 81       	ldd	r20, Y+3	; 0x03
    153e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <MDIO_voidSetPinValue>
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <HLED_voidToggleLedStatus>:

void HLED_voidToggleLedStatus(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPinNo)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	00 d0       	rcall	.+0      	; 0x1554 <HLED_voidToggleLedStatus+0x6>
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_DIOPort,A_DIOPinNo);
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	6a 81       	ldd	r22, Y+2	; 0x02
    1560:	0e 94 03 09 	call	0x1206	; 0x1206 <MDIO_voidTogglePinValue>
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <HSSD_voidDisplayNumber>:
#include"../include/HAL/SSD/SSD_Cfg.h"

#define F_CPU 8000000UL

void HSSD_voidDisplayNumber(DIO_PORTS A_DIOPort, u8 A_u8Number)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <HSSD_voidDisplayNumber+0x6>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <HSSD_voidDisplayNumber+0x8>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8Number)
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3c 83       	std	Y+4, r19	; 0x04
    1586:	2b 83       	std	Y+3, r18	; 0x03
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	91 05       	cpc	r25, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <HSSD_voidDisplayNumber+0x26>
    1592:	55 c0       	rjmp	.+170    	; 0x163e <HSSD_voidDisplayNumber+0xd0>
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	25 30       	cpi	r18, 0x05	; 5
    159a:	31 05       	cpc	r19, r1
    159c:	dc f4       	brge	.+54     	; 0x15d4 <HSSD_voidDisplayNumber+0x66>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <HSSD_voidDisplayNumber+0x3c>
    15a8:	3b c0       	rjmp	.+118    	; 0x1620 <HSSD_voidDisplayNumber+0xb2>
    15aa:	2b 81       	ldd	r18, Y+3	; 0x03
    15ac:	3c 81       	ldd	r19, Y+4	; 0x04
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	2c f4       	brge	.+10     	; 0x15be <HSSD_voidDisplayNumber+0x50>
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	69 f1       	breq	.+90     	; 0x1616 <HSSD_voidDisplayNumber+0xa8>
    15bc:	5d c0       	rjmp	.+186    	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
    15be:	2b 81       	ldd	r18, Y+3	; 0x03
    15c0:	3c 81       	ldd	r19, Y+4	; 0x04
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	89 f1       	breq	.+98     	; 0x162a <HSSD_voidDisplayNumber+0xbc>
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	91 05       	cpc	r25, r1
    15d0:	89 f1       	breq	.+98     	; 0x1634 <HSSD_voidDisplayNumber+0xc6>
    15d2:	52 c0       	rjmp	.+164    	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
    15d4:	2b 81       	ldd	r18, Y+3	; 0x03
    15d6:	3c 81       	ldd	r19, Y+4	; 0x04
    15d8:	27 30       	cpi	r18, 0x07	; 7
    15da:	31 05       	cpc	r19, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <HSSD_voidDisplayNumber+0x72>
    15de:	3e c0       	rjmp	.+124    	; 0x165c <HSSD_voidDisplayNumber+0xee>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	88 30       	cpi	r24, 0x08	; 8
    15e6:	91 05       	cpc	r25, r1
    15e8:	5c f4       	brge	.+22     	; 0x1600 <HSSD_voidDisplayNumber+0x92>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	3c 81       	ldd	r19, Y+4	; 0x04
    15ee:	25 30       	cpi	r18, 0x05	; 5
    15f0:	31 05       	cpc	r19, r1
    15f2:	51 f1       	breq	.+84     	; 0x1648 <HSSD_voidDisplayNumber+0xda>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	86 30       	cpi	r24, 0x06	; 6
    15fa:	91 05       	cpc	r25, r1
    15fc:	51 f1       	breq	.+84     	; 0x1652 <HSSD_voidDisplayNumber+0xe4>
    15fe:	3c c0       	rjmp	.+120    	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
    1600:	2b 81       	ldd	r18, Y+3	; 0x03
    1602:	3c 81       	ldd	r19, Y+4	; 0x04
    1604:	28 30       	cpi	r18, 0x08	; 8
    1606:	31 05       	cpc	r19, r1
    1608:	71 f1       	breq	.+92     	; 0x1666 <HSSD_voidDisplayNumber+0xf8>
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	89 30       	cpi	r24, 0x09	; 9
    1610:	91 05       	cpc	r25, r1
    1612:	71 f1       	breq	.+92     	; 0x1670 <HSSD_voidDisplayNumber+0x102>
    1614:	31 c0       	rjmp	.+98     	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
	{
	case 0: MDIO_voidSetPortValue(A_DIOPort,ZERO); break;
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	6f e3       	ldi	r22, 0x3F	; 63
    161a:	0e 94 4f 0a 	call	0x149e	; 0x149e <MDIO_voidSetPortValue>
    161e:	2c c0       	rjmp	.+88     	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
	case 1: MDIO_voidSetPortValue(A_DIOPort,ONE); break;
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	66 e0       	ldi	r22, 0x06	; 6
    1624:	0e 94 4f 0a 	call	0x149e	; 0x149e <MDIO_voidSetPortValue>
    1628:	27 c0       	rjmp	.+78     	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
	case 2: MDIO_voidSetPortValue(A_DIOPort,TWO); break;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	6b e5       	ldi	r22, 0x5B	; 91
    162e:	0e 94 4f 0a 	call	0x149e	; 0x149e <MDIO_voidSetPortValue>
    1632:	22 c0       	rjmp	.+68     	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
	case 3: MDIO_voidSetPortValue(A_DIOPort,THREE); break;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	6f e4       	ldi	r22, 0x4F	; 79
    1638:	0e 94 4f 0a 	call	0x149e	; 0x149e <MDIO_voidSetPortValue>
    163c:	1d c0       	rjmp	.+58     	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
	case 4: MDIO_voidSetPortValue(A_DIOPort,FOUR); break;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	66 e6       	ldi	r22, 0x66	; 102
    1642:	0e 94 4f 0a 	call	0x149e	; 0x149e <MDIO_voidSetPortValue>
    1646:	18 c0       	rjmp	.+48     	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
	case 5: MDIO_voidSetPortValue(A_DIOPort,FIVE); break;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	6d e6       	ldi	r22, 0x6D	; 109
    164c:	0e 94 4f 0a 	call	0x149e	; 0x149e <MDIO_voidSetPortValue>
    1650:	13 c0       	rjmp	.+38     	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
	case 6: MDIO_voidSetPortValue(A_DIOPort,SIX); break;
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	6d e7       	ldi	r22, 0x7D	; 125
    1656:	0e 94 4f 0a 	call	0x149e	; 0x149e <MDIO_voidSetPortValue>
    165a:	0e c0       	rjmp	.+28     	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
	case 7: MDIO_voidSetPortValue(A_DIOPort,SEVEN); break;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	67 e0       	ldi	r22, 0x07	; 7
    1660:	0e 94 4f 0a 	call	0x149e	; 0x149e <MDIO_voidSetPortValue>
    1664:	09 c0       	rjmp	.+18     	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
	case 8: MDIO_voidSetPortValue(A_DIOPort,EIGHT); break;
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	6f e7       	ldi	r22, 0x7F	; 127
    166a:	0e 94 4f 0a 	call	0x149e	; 0x149e <MDIO_voidSetPortValue>
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <HSSD_voidDisplayNumber+0x10a>
	case 9: MDIO_voidSetPortValue(A_DIOPort,NINE); break;
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	6f e6       	ldi	r22, 0x6F	; 111
    1674:	0e 94 4f 0a 	call	0x149e	; 0x149e <MDIO_voidSetPortValue>
	}
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <HSSD_voidDisplayNumberAscending>:

void HSSD_voidDisplayNumberAscending(DIO_PORTS A_DIOPort, u16 A_u16DelayinMS)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	62 97       	sbiw	r28, 0x12	; 18
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	88 8b       	std	Y+16, r24	; 0x10
    169c:	7a 8b       	std	Y+18, r23	; 0x12
    169e:	69 8b       	std	Y+17, r22	; 0x11
	for(u8 i=0; i<=9; i++)
    16a0:	1f 86       	std	Y+15, r1	; 0x0f
    16a2:	80 c0       	rjmp	.+256    	; 0x17a4 <HSSD_voidDisplayNumberAscending+0x11e>
	{
		HSSD_voidDisplayNumber(A_DIOPort,i);
    16a4:	88 89       	ldd	r24, Y+16	; 0x10
    16a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    16a8:	0e 94 b7 0a 	call	0x156e	; 0x156e <HSSD_voidDisplayNumber>
		_delay_ms(A_u16DelayinMS);
    16ac:	89 89       	ldd	r24, Y+17	; 0x11
    16ae:	9a 89       	ldd	r25, Y+18	; 0x12
    16b0:	cc 01       	movw	r24, r24
    16b2:	a0 e0       	ldi	r26, 0x00	; 0
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	8b 87       	std	Y+11, r24	; 0x0b
    16c4:	9c 87       	std	Y+12, r25	; 0x0c
    16c6:	ad 87       	std	Y+13, r26	; 0x0d
    16c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    16cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a ef       	ldi	r20, 0xFA	; 250
    16d8:	54 e4       	ldi	r21, 0x44	; 68
    16da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	8f 83       	std	Y+7, r24	; 0x07
    16e4:	98 87       	std	Y+8, r25	; 0x08
    16e6:	a9 87       	std	Y+9, r26	; 0x09
    16e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ea:	6f 81       	ldd	r22, Y+7	; 0x07
    16ec:	78 85       	ldd	r23, Y+8	; 0x08
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	2c f4       	brge	.+10     	; 0x170c <HSSD_voidDisplayNumberAscending+0x86>
		__ticks = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	3f c0       	rjmp	.+126    	; 0x178a <HSSD_voidDisplayNumberAscending+0x104>
	else if (__tmp > 65535)
    170c:	6f 81       	ldd	r22, Y+7	; 0x07
    170e:	78 85       	ldd	r23, Y+8	; 0x08
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	9a 85       	ldd	r25, Y+10	; 0x0a
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	57 e4       	ldi	r21, 0x47	; 71
    171c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1720:	18 16       	cp	r1, r24
    1722:	4c f5       	brge	.+82     	; 0x1776 <HSSD_voidDisplayNumberAscending+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	0f c0       	rjmp	.+30     	; 0x176c <HSSD_voidDisplayNumberAscending+0xe6>
    174e:	88 ec       	ldi	r24, 0xC8	; 200
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9c 83       	std	Y+4, r25	; 0x04
    1754:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <HSSD_voidDisplayNumberAscending+0xd4>
    175e:	9c 83       	std	Y+4, r25	; 0x04
    1760:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	8d 81       	ldd	r24, Y+5	; 0x05
    176e:	9e 81       	ldd	r25, Y+6	; 0x06
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f7       	brne	.-38     	; 0x174e <HSSD_voidDisplayNumberAscending+0xc8>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <HSSD_voidDisplayNumberAscending+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	9a 81       	ldd	r25, Y+2	; 0x02
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <HSSD_voidDisplayNumberAscending+0x110>
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
	}
}

void HSSD_voidDisplayNumberAscending(DIO_PORTS A_DIOPort, u16 A_u16DelayinMS)
{
	for(u8 i=0; i<=9; i++)
    179e:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	8f 87       	std	Y+15, r24	; 0x0f
    17a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a6:	8a 30       	cpi	r24, 0x0A	; 10
    17a8:	08 f4       	brcc	.+2      	; 0x17ac <HSSD_voidDisplayNumberAscending+0x126>
    17aa:	7c cf       	rjmp	.-264    	; 0x16a4 <HSSD_voidDisplayNumberAscending+0x1e>
	{
		HSSD_voidDisplayNumber(A_DIOPort,i);
		_delay_ms(A_u16DelayinMS);
	}
}
    17ac:	62 96       	adiw	r28, 0x12	; 18
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <HSSD_voidDisplayNumberDescending>:

void HSSD_voidDisplayNumberDescending(DIO_PORTS A_DIOPort, u16 A_u16DelayinMS)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	62 97       	sbiw	r28, 0x12	; 18
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	88 8b       	std	Y+16, r24	; 0x10
    17d4:	7a 8b       	std	Y+18, r23	; 0x12
    17d6:	69 8b       	std	Y+17, r22	; 0x11
	for(s8 i=9; i>=0; i--)
    17d8:	89 e0       	ldi	r24, 0x09	; 9
    17da:	8f 87       	std	Y+15, r24	; 0x0f
    17dc:	81 c0       	rjmp	.+258    	; 0x18e0 <HSSD_voidDisplayNumberDescending+0x122>
	{
		HSSD_voidDisplayNumber(A_DIOPort,i);
    17de:	9f 85       	ldd	r25, Y+15	; 0x0f
    17e0:	88 89       	ldd	r24, Y+16	; 0x10
    17e2:	69 2f       	mov	r22, r25
    17e4:	0e 94 b7 0a 	call	0x156e	; 0x156e <HSSD_voidDisplayNumber>
		_delay_ms(A_u16DelayinMS);
    17e8:	89 89       	ldd	r24, Y+17	; 0x11
    17ea:	9a 89       	ldd	r25, Y+18	; 0x12
    17ec:	cc 01       	movw	r24, r24
    17ee:	a0 e0       	ldi	r26, 0x00	; 0
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8b 87       	std	Y+11, r24	; 0x0b
    1800:	9c 87       	std	Y+12, r25	; 0x0c
    1802:	ad 87       	std	Y+13, r26	; 0x0d
    1804:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	6b 85       	ldd	r22, Y+11	; 0x0b
    1808:	7c 85       	ldd	r23, Y+12	; 0x0c
    180a:	8d 85       	ldd	r24, Y+13	; 0x0d
    180c:	9e 85       	ldd	r25, Y+14	; 0x0e
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a ef       	ldi	r20, 0xFA	; 250
    1814:	54 e4       	ldi	r21, 0x44	; 68
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8f 83       	std	Y+7, r24	; 0x07
    1820:	98 87       	std	Y+8, r25	; 0x08
    1822:	a9 87       	std	Y+9, r26	; 0x09
    1824:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <HSSD_voidDisplayNumberDescending+0x8a>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <HSSD_voidDisplayNumberDescending+0x108>
	else if (__tmp > 65535)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <HSSD_voidDisplayNumberDescending+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	6b 85       	ldd	r22, Y+11	; 0x0b
    1862:	7c 85       	ldd	r23, Y+12	; 0x0c
    1864:	8d 85       	ldd	r24, Y+13	; 0x0d
    1866:	9e 85       	ldd	r25, Y+14	; 0x0e
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <HSSD_voidDisplayNumberDescending+0xea>
    188a:	88 ec       	ldi	r24, 0xC8	; 200
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9c 83       	std	Y+4, r25	; 0x04
    1890:	8b 83       	std	Y+3, r24	; 0x03
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <HSSD_voidDisplayNumberDescending+0xd8>
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <HSSD_voidDisplayNumberDescending+0xcc>
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <HSSD_voidDisplayNumberDescending+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <HSSD_voidDisplayNumberDescending+0x114>
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
	}
}

void HSSD_voidDisplayNumberDescending(DIO_PORTS A_DIOPort, u16 A_u16DelayinMS)
{
	for(s8 i=9; i>=0; i--)
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	81 50       	subi	r24, 0x01	; 1
    18de:	8f 87       	std	Y+15, r24	; 0x0f
    18e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e2:	88 23       	and	r24, r24
    18e4:	0c f0       	brlt	.+2      	; 0x18e8 <HSSD_voidDisplayNumberDescending+0x12a>
    18e6:	7b cf       	rjmp	.-266    	; 0x17de <HSSD_voidDisplayNumberDescending+0x20>
	{
		HSSD_voidDisplayNumber(A_DIOPort,i);
		_delay_ms(A_u16DelayinMS);
	}
}
    18e8:	62 96       	adiw	r28, 0x12	; 18
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <MUART_voidInit>:
#define NULL  0

static void (*FuncPtr[3]) (void) = {NULL,NULL,NULL};

void MUART_voidInit(void)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <MUART_voidInit+0x6>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16Baudrate = BAUD_RATE_EQUATION;
    1904:	83 e3       	ldi	r24, 0x33	; 51
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
	// Set Baudrate
	UBRRL = (u8)local_u16Baudrate;
    190c:	e9 e2       	ldi	r30, 0x29	; 41
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	80 83       	st	Z, r24
	UBRRH = (u8)(local_u16Baudrate >> 8);
    1914:	e0 e4       	ldi	r30, 0x40	; 64
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	89 2f       	mov	r24, r25
    191e:	99 27       	eor	r25, r25
    1920:	80 83       	st	Z, r24

	// Character Size 8-bit
	CLR_BIT(UCSRB,2);
    1922:	aa e2       	ldi	r26, 0x2A	; 42
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	ea e2       	ldi	r30, 0x2A	; 42
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8b 7f       	andi	r24, 0xFB	; 251
    192e:	8c 93       	st	X, r24
	// Mode Asynchronous operation
	// Parity Disabled
	// 1 Stop Bit
	UCSRC = CONC_BIT(1,0,0,0,0,1,1,0);
    1930:	e0 e4       	ldi	r30, 0x40	; 64
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	86 e8       	ldi	r24, 0x86	; 134
    1936:	80 83       	st	Z, r24

	// Enable Receiver
	SET_BIT(UCSRB,4);
    1938:	aa e2       	ldi	r26, 0x2A	; 42
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	ea e2       	ldi	r30, 0x2A	; 42
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	80 61       	ori	r24, 0x10	; 16
    1944:	8c 93       	st	X, r24
	// Enable Transmitter
	SET_BIT(UCSRB,3);
    1946:	aa e2       	ldi	r26, 0x2A	; 42
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	ea e2       	ldi	r30, 0x2A	; 42
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	88 60       	ori	r24, 0x08	; 8
    1952:	8c 93       	st	X, r24
}
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <MUART_voidSendByteSyncBlocking>:

void MUART_voidSendByteSyncBlocking (u8 A_u8DataByte)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	0f 92       	push	r0
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	89 83       	std	Y+1, r24	; 0x01
	// Wait until UDRE is empty
	while(GET_BIT(UCSRA,5)==0);
    196a:	eb e2       	ldi	r30, 0x2B	; 43
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	82 95       	swap	r24
    1972:	86 95       	lsr	r24
    1974:	87 70       	andi	r24, 0x07	; 7
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	81 70       	andi	r24, 0x01	; 1
    197c:	90 70       	andi	r25, 0x00	; 0
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	a1 f3       	breq	.-24     	; 0x196a <MUART_voidSendByteSyncBlocking+0xc>

	// Set Data into Tx Register and start Transmission
	UDR = A_u8DataByte;
    1982:	ec e2       	ldi	r30, 0x2C	; 44
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	80 83       	st	Z, r24

	// wait until UDRE is empty
	while (GET_BIT(UCSRA,5)==0);
    198a:	eb e2       	ldi	r30, 0x2B	; 43
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	82 95       	swap	r24
    1992:	86 95       	lsr	r24
    1994:	87 70       	andi	r24, 0x07	; 7
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	81 70       	andi	r24, 0x01	; 1
    199c:	90 70       	andi	r25, 0x00	; 0
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	a1 f3       	breq	.-24     	; 0x198a <MUART_voidSendByteSyncBlocking+0x2c>

	// Clear transmit Interrupt flag
	SET_BIT(UCSRA,6);
    19a2:	ab e2       	ldi	r26, 0x2B	; 43
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	eb e2       	ldi	r30, 0x2B	; 43
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	80 64       	ori	r24, 0x40	; 64
    19ae:	8c 93       	st	X, r24
}
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <MUART_voidSendByteSyncNonBlocking>:

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <MUART_voidSendByteSyncNonBlocking+0x6>
    19be:	0f 92       	push	r0
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	8b 83       	std	Y+3, r24	; 0x03
	u32 loacl_u32timeout = 0;
    19c6:	1a 82       	std	Y+2, r1	; 0x02
    19c8:	19 82       	std	Y+1, r1	; 0x01
    19ca:	0b c0       	rjmp	.+22     	; 0x19e2 <MUART_voidSendByteSyncNonBlocking+0x2a>
	// Wait until UDRE is empty or timeout
	while(GET_BIT(UCSRA,5)==0)
	{
		loacl_u32timeout++;
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
		if(loacl_u32timeout == NON_BLOCKING_TIME_OUT)
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	23 e1       	ldi	r18, 0x13	; 19
    19dc:	88 38       	cpi	r24, 0x88	; 136
    19de:	92 07       	cpc	r25, r18
    19e0:	61 f0       	breq	.+24     	; 0x19fa <MUART_voidSendByteSyncNonBlocking+0x42>

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
	u32 loacl_u32timeout = 0;
	// Wait until UDRE is empty or timeout
	while(GET_BIT(UCSRA,5)==0)
    19e2:	eb e2       	ldi	r30, 0x2B	; 43
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	82 95       	swap	r24
    19ea:	86 95       	lsr	r24
    19ec:	87 70       	andi	r24, 0x07	; 7
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	81 70       	andi	r24, 0x01	; 1
    19f4:	90 70       	andi	r25, 0x00	; 0
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	49 f3       	breq	.-46     	; 0x19cc <MUART_voidSendByteSyncNonBlocking+0x14>
			break;
		}
	}

	// Set Data into Tx Register and start Transmission
	if(loacl_u32timeout != NON_BLOCKING_TIME_OUT)
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	9a 81       	ldd	r25, Y+2	; 0x02
    19fe:	23 e1       	ldi	r18, 0x13	; 19
    1a00:	88 38       	cpi	r24, 0x88	; 136
    1a02:	92 07       	cpc	r25, r18
    1a04:	29 f1       	breq	.+74     	; 0x1a50 <MUART_voidSendByteSyncNonBlocking+0x98>
	{
		loacl_u32timeout = 0;
    1a06:	1a 82       	std	Y+2, r1	; 0x02
    1a08:	19 82       	std	Y+1, r1	; 0x01
		UDR = A_u8DataByte;
    1a0a:	ec e2       	ldi	r30, 0x2C	; 44
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	80 83       	st	Z, r24
    1a12:	0b c0       	rjmp	.+22     	; 0x1a2a <MUART_voidSendByteSyncNonBlocking+0x72>

		// Wait until UDRE is empty or timeout
		while(GET_BIT(UCSRA,5)==0)
		{
			loacl_u32timeout++;
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
			if(loacl_u32timeout == NON_BLOCKING_TIME_OUT)
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	23 e1       	ldi	r18, 0x13	; 19
    1a24:	88 38       	cpi	r24, 0x88	; 136
    1a26:	92 07       	cpc	r25, r18
    1a28:	61 f0       	breq	.+24     	; 0x1a42 <MUART_voidSendByteSyncNonBlocking+0x8a>
	{
		loacl_u32timeout = 0;
		UDR = A_u8DataByte;

		// Wait until UDRE is empty or timeout
		while(GET_BIT(UCSRA,5)==0)
    1a2a:	eb e2       	ldi	r30, 0x2B	; 43
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	82 95       	swap	r24
    1a32:	86 95       	lsr	r24
    1a34:	87 70       	andi	r24, 0x07	; 7
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	81 70       	andi	r24, 0x01	; 1
    1a3c:	90 70       	andi	r25, 0x00	; 0
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	49 f3       	breq	.-46     	; 0x1a14 <MUART_voidSendByteSyncNonBlocking+0x5c>
				break;
			}
		}

		// Clear transmit Interrupt flag
		SET_BIT(UCSRA,6);
    1a42:	ab e2       	ldi	r26, 0x2B	; 43
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	eb e2       	ldi	r30, 0x2B	; 43
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 64       	ori	r24, 0x40	; 64
    1a4e:	8c 93       	st	X, r24
	}
}
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <MUART_voidSendStringSyncNonBlocking>:

void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <MUART_voidSendStringSyncNonBlocking+0x6>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	0b c0       	rjmp	.+22     	; 0x1a82 <MUART_voidSendStringSyncNonBlocking+0x26>
	while(*A_pu8String > 0)
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
    1a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a70:	20 81       	ld	r18, Z
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	82 2f       	mov	r24, r18
    1a7e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <MUART_voidSendByteSyncNonBlocking>
	}
}

void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
	while(*A_pu8String > 0)
    1a82:	e9 81       	ldd	r30, Y+1	; 0x01
    1a84:	fa 81       	ldd	r31, Y+2	; 0x02
    1a86:	80 81       	ld	r24, Z
    1a88:	88 23       	and	r24, r24
    1a8a:	81 f7       	brne	.-32     	; 0x1a6c <MUART_voidSendStringSyncNonBlocking+0x10>
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
	}
}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <MUART_voidSendByteAsync>:

void MUART_voidSendByteAsync (u8 A_u8DataByte)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	0f 92       	push	r0
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(UCSRA,5)==1)
    1aa2:	eb e2       	ldi	r30, 0x2B	; 43
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	82 95       	swap	r24
    1aaa:	86 95       	lsr	r24
    1aac:	87 70       	andi	r24, 0x07	; 7
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	81 70       	andi	r24, 0x01	; 1
    1ab4:	90 70       	andi	r25, 0x00	; 0
    1ab6:	88 23       	and	r24, r24
    1ab8:	21 f0       	breq	.+8      	; 0x1ac2 <MUART_voidSendByteAsync+0x2c>
	{
		UDR = A_u8DataByte;
    1aba:	ec e2       	ldi	r30, 0x2C	; 44
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	80 83       	st	Z, r24
	}
}
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <MUART_u8ReadByteSyncBlocking>:

u8 MUART_u8ReadByteSyncBlocking (void)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,7)==0);
    1ad2:	eb e2       	ldi	r30, 0x2B	; 43
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	88 23       	and	r24, r24
    1ada:	dc f7       	brge	.-10     	; 0x1ad2 <MUART_u8ReadByteSyncBlocking+0x8>

	return UDR;
    1adc:	ec e2       	ldi	r30, 0x2C	; 44
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
}
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <MUART_u8ReadByteAsync>:

u8 MUART_u8ReadByteAsync (void)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	0f 92       	push	r0
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	if(GET_BIT(UCSRA,7)==1)
    1af2:	eb e2       	ldi	r30, 0x2B	; 43
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	88 1f       	adc	r24, r24
    1afa:	88 27       	eor	r24, r24
    1afc:	88 1f       	adc	r24, r24
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	31 f4       	brne	.+12     	; 0x1b0e <MUART_u8ReadByteAsync+0x26>
	{
		return UDR;
    1b02:	ec e2       	ldi	r30, 0x2C	; 44
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	89 83       	std	Y+1, r24	; 0x01
	}
}
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	00 c0       	rjmp	.+0      	; 0x1b0e <MUART_u8ReadByteAsync+0x26>
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <MUART_u8ReadByteSyncNonBlocking>:
u8 MUART_u8ReadByteSyncNonBlocking (void)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <MUART_u8ReadByteSyncNonBlocking+0x6>
    1b1c:	0f 92       	push	r0
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8value= NO_VALUE_RETURNED;
    1b22:	8f ef       	ldi	r24, 0xFF	; 255
    1b24:	8b 83       	std	Y+3, r24	; 0x03
	u32 local_u32timeout = 0;
    1b26:	1a 82       	std	Y+2, r1	; 0x02
    1b28:	19 82       	std	Y+1, r1	; 0x01
    1b2a:	0b c0       	rjmp	.+22     	; 0x1b42 <MUART_u8ReadByteSyncNonBlocking+0x2c>
	while(GET_BIT(UCSRA,7)==0)
	{
		local_u32timeout++;
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
		if(local_u32timeout == NON_BLOCKING_TIME_OUT)
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3a:	23 e1       	ldi	r18, 0x13	; 19
    1b3c:	88 38       	cpi	r24, 0x88	; 136
    1b3e:	92 07       	cpc	r25, r18
    1b40:	29 f0       	breq	.+10     	; 0x1b4c <MUART_u8ReadByteSyncNonBlocking+0x36>
}
u8 MUART_u8ReadByteSyncNonBlocking (void)
{
	u8 local_u8value= NO_VALUE_RETURNED;
	u32 local_u32timeout = 0;
	while(GET_BIT(UCSRA,7)==0)
    1b42:	eb e2       	ldi	r30, 0x2B	; 43
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	88 23       	and	r24, r24
    1b4a:	84 f7       	brge	.-32     	; 0x1b2c <MUART_u8ReadByteSyncNonBlocking+0x16>
		{
			break;
		}
	}

	if(local_u32timeout != NON_BLOCKING_TIME_OUT)
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	23 e1       	ldi	r18, 0x13	; 19
    1b52:	88 38       	cpi	r24, 0x88	; 136
    1b54:	92 07       	cpc	r25, r18
    1b56:	31 f0       	breq	.+12     	; 0x1b64 <MUART_u8ReadByteSyncNonBlocking+0x4e>
	{
		local_u32timeout =0;
    1b58:	1a 82       	std	Y+2, r1	; 0x02
    1b5a:	19 82       	std	Y+1, r1	; 0x01
		local_u8value = UDR;
    1b5c:	ec e2       	ldi	r30, 0x2C	; 44
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	8b 83       	std	Y+3, r24	; 0x03
	}

	return local_u8value;
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <MUART_voidSetCallBack>:
	UART_UDRE_INTERRUPT,
	UART_TX_INTERRUPT
}UART_INTERRUPTS;

void MUART_voidSetCallBack (UART_INTERRUPTS A_InterruptSource , void (*A_PtoFunc)(void))
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <MUART_voidSetCallBack+0x6>
    1b78:	0f 92       	push	r0
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	7b 83       	std	Y+3, r23	; 0x03
    1b82:	6a 83       	std	Y+2, r22	; 0x02
	if((A_InterruptSource <= UART_TX_INTERRUPT) && (A_PtoFunc != NULL))
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	83 30       	cpi	r24, 0x03	; 3
    1b88:	80 f4       	brcc	.+32     	; 0x1baa <MUART_voidSetCallBack+0x38>
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	61 f0       	breq	.+24     	; 0x1baa <MUART_voidSetCallBack+0x38>
	{
		FuncPtr[A_InterruptSource] = A_PtoFunc;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	e8 54       	subi	r30, 0x48	; 72
    1ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba6:	91 83       	std	Z+1, r25	; 0x01
    1ba8:	80 83       	st	Z, r24
	}
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    1bb6:	1f 92       	push	r1
    1bb8:	0f 92       	push	r0
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	0f 92       	push	r0
    1bbe:	11 24       	eor	r1, r1
    1bc0:	2f 93       	push	r18
    1bc2:	3f 93       	push	r19
    1bc4:	4f 93       	push	r20
    1bc6:	5f 93       	push	r21
    1bc8:	6f 93       	push	r22
    1bca:	7f 93       	push	r23
    1bcc:	8f 93       	push	r24
    1bce:	9f 93       	push	r25
    1bd0:	af 93       	push	r26
    1bd2:	bf 93       	push	r27
    1bd4:	ef 93       	push	r30
    1bd6:	ff 93       	push	r31
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
	if(FuncPtr[UART_RX_INTERRUPT] != NULL)
    1be0:	80 91 b8 01 	lds	r24, 0x01B8
    1be4:	90 91 b9 01 	lds	r25, 0x01B9
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	29 f0       	breq	.+10     	; 0x1bf6 <__vector_13+0x40>
	{
		FuncPtr[UART_RX_INTERRUPT]();
    1bec:	e0 91 b8 01 	lds	r30, 0x01B8
    1bf0:	f0 91 b9 01 	lds	r31, 0x01B9
    1bf4:	09 95       	icall
	}
}
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	ff 91       	pop	r31
    1bfc:	ef 91       	pop	r30
    1bfe:	bf 91       	pop	r27
    1c00:	af 91       	pop	r26
    1c02:	9f 91       	pop	r25
    1c04:	8f 91       	pop	r24
    1c06:	7f 91       	pop	r23
    1c08:	6f 91       	pop	r22
    1c0a:	5f 91       	pop	r21
    1c0c:	4f 91       	pop	r20
    1c0e:	3f 91       	pop	r19
    1c10:	2f 91       	pop	r18
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	0f 90       	pop	r0
    1c18:	1f 90       	pop	r1
    1c1a:	18 95       	reti

00001c1c <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    1c1c:	1f 92       	push	r1
    1c1e:	0f 92       	push	r0
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	0f 92       	push	r0
    1c24:	11 24       	eor	r1, r1
    1c26:	2f 93       	push	r18
    1c28:	3f 93       	push	r19
    1c2a:	4f 93       	push	r20
    1c2c:	5f 93       	push	r21
    1c2e:	6f 93       	push	r22
    1c30:	7f 93       	push	r23
    1c32:	8f 93       	push	r24
    1c34:	9f 93       	push	r25
    1c36:	af 93       	push	r26
    1c38:	bf 93       	push	r27
    1c3a:	ef 93       	push	r30
    1c3c:	ff 93       	push	r31
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
	if(FuncPtr[UART_UDRE_INTERRUPT] != NULL)
    1c46:	80 91 ba 01 	lds	r24, 0x01BA
    1c4a:	90 91 bb 01 	lds	r25, 0x01BB
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	29 f0       	breq	.+10     	; 0x1c5c <__vector_14+0x40>
	{
		FuncPtr[UART_UDRE_INTERRUPT]();
    1c52:	e0 91 ba 01 	lds	r30, 0x01BA
    1c56:	f0 91 bb 01 	lds	r31, 0x01BB
    1c5a:	09 95       	icall
	}
}
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	ff 91       	pop	r31
    1c62:	ef 91       	pop	r30
    1c64:	bf 91       	pop	r27
    1c66:	af 91       	pop	r26
    1c68:	9f 91       	pop	r25
    1c6a:	8f 91       	pop	r24
    1c6c:	7f 91       	pop	r23
    1c6e:	6f 91       	pop	r22
    1c70:	5f 91       	pop	r21
    1c72:	4f 91       	pop	r20
    1c74:	3f 91       	pop	r19
    1c76:	2f 91       	pop	r18
    1c78:	0f 90       	pop	r0
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	0f 90       	pop	r0
    1c7e:	1f 90       	pop	r1
    1c80:	18 95       	reti

00001c82 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    1c82:	1f 92       	push	r1
    1c84:	0f 92       	push	r0
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	0f 92       	push	r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	2f 93       	push	r18
    1c8e:	3f 93       	push	r19
    1c90:	4f 93       	push	r20
    1c92:	5f 93       	push	r21
    1c94:	6f 93       	push	r22
    1c96:	7f 93       	push	r23
    1c98:	8f 93       	push	r24
    1c9a:	9f 93       	push	r25
    1c9c:	af 93       	push	r26
    1c9e:	bf 93       	push	r27
    1ca0:	ef 93       	push	r30
    1ca2:	ff 93       	push	r31
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
	if(FuncPtr[UART_TX_INTERRUPT] != NULL)
    1cac:	80 91 bc 01 	lds	r24, 0x01BC
    1cb0:	90 91 bd 01 	lds	r25, 0x01BD
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	29 f0       	breq	.+10     	; 0x1cc2 <__vector_15+0x40>
	{
		FuncPtr[UART_TX_INTERRUPT]();
    1cb8:	e0 91 bc 01 	lds	r30, 0x01BC
    1cbc:	f0 91 bd 01 	lds	r31, 0x01BD
    1cc0:	09 95       	icall
	}
}
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	ff 91       	pop	r31
    1cc8:	ef 91       	pop	r30
    1cca:	bf 91       	pop	r27
    1ccc:	af 91       	pop	r26
    1cce:	9f 91       	pop	r25
    1cd0:	8f 91       	pop	r24
    1cd2:	7f 91       	pop	r23
    1cd4:	6f 91       	pop	r22
    1cd6:	5f 91       	pop	r21
    1cd8:	4f 91       	pop	r20
    1cda:	3f 91       	pop	r19
    1cdc:	2f 91       	pop	r18
    1cde:	0f 90       	pop	r0
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	0f 90       	pop	r0
    1ce4:	1f 90       	pop	r1
    1ce6:	18 95       	reti

00001ce8 <__prologue_saves__>:
    1ce8:	2f 92       	push	r2
    1cea:	3f 92       	push	r3
    1cec:	4f 92       	push	r4
    1cee:	5f 92       	push	r5
    1cf0:	6f 92       	push	r6
    1cf2:	7f 92       	push	r7
    1cf4:	8f 92       	push	r8
    1cf6:	9f 92       	push	r9
    1cf8:	af 92       	push	r10
    1cfa:	bf 92       	push	r11
    1cfc:	cf 92       	push	r12
    1cfe:	df 92       	push	r13
    1d00:	ef 92       	push	r14
    1d02:	ff 92       	push	r15
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	ca 1b       	sub	r28, r26
    1d12:	db 0b       	sbc	r29, r27
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	09 94       	ijmp

00001d20 <__epilogue_restores__>:
    1d20:	2a 88       	ldd	r2, Y+18	; 0x12
    1d22:	39 88       	ldd	r3, Y+17	; 0x11
    1d24:	48 88       	ldd	r4, Y+16	; 0x10
    1d26:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d28:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d30:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d32:	b9 84       	ldd	r11, Y+9	; 0x09
    1d34:	c8 84       	ldd	r12, Y+8	; 0x08
    1d36:	df 80       	ldd	r13, Y+7	; 0x07
    1d38:	ee 80       	ldd	r14, Y+6	; 0x06
    1d3a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d3c:	0c 81       	ldd	r16, Y+4	; 0x04
    1d3e:	1b 81       	ldd	r17, Y+3	; 0x03
    1d40:	aa 81       	ldd	r26, Y+2	; 0x02
    1d42:	b9 81       	ldd	r27, Y+1	; 0x01
    1d44:	ce 0f       	add	r28, r30
    1d46:	d1 1d       	adc	r29, r1
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	ed 01       	movw	r28, r26
    1d54:	08 95       	ret

00001d56 <_exit>:
    1d56:	f8 94       	cli

00001d58 <__stop_program>:
    1d58:	ff cf       	rjmp	.-2      	; 0x1d58 <__stop_program>
